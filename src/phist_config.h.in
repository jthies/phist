#ifndef PHIST_CONFIG_H
#define PHIST_CONFIG_H

/*! general verbosity of PHIST:
        0: only print errors
        1: errors and warnings
        2: some info about the progress of the algorthms etc.
        3: verbose info
        4: debugging output
        5: function tracing
*/
#cmakedefine PHIST_OUTLEV ${PHIST_OUTLEV}

/* some compiler/system flags */
#cmakedefine PHIST_HAVE_CXX11_LAMBDAS
#cmakedefine PHIST_HAVE_CXX11_THREADLOCAL
#cmakedefine PHIST_HAVE_CXX11_MOVEDEFAULT
#cmakedefine PHIST_HAVE_OPENMP_SIMD
#cmakedefine PHIST_HAVE_MPI
#cmakedefine PHIST_HAVE_OPENMP

/* cross-compile for Intel MIC */
#cmakedefine PHIST_BUILD_MIC

/* do you want to compile the single-precision
version of the code in addition to the standard 
(double)? 
*/
#cmakedefine PHIST_HAVE_SP

/* do you want to compile the complex valued
version of the code (only available for some
kernel libs) ?
*/
#cmakedefine PHIST_HAVE_CMPLX

/* one can enable/disable the use of certain SIMD intrinsics (manually) using ccmake,
 * this mostly affects the builtin kernels, if you e.g. use GHOST as kernel lib, it
 * will use whatever it was configured to use when installed.
 */
#cmakedefine PHIST_HAVE_SSE
#cmakedefine PHIST_HAVE_AVX
#cmakedefine PHIST_HAVE_AVX2

/* do we have support for higher precision kernel routines (Kahan-style reductions etc.)?
*/
#cmakedefine PHIST_HIGH_PRECISION_KERNELS

/* which library provides the basic matrix/vector operations? */
#cmakedefine PHIST_KERNEL_LIB_EPETRA
#cmakedefine PHIST_KERNEL_LIB_TPETRA
#cmakedefine PHIST_KERNEL_LIB_GHOST
#cmakedefine PHIST_KERNEL_LIB_BUILTIN
#cmakedefine PHIST_KERNEL_LIB_MAGMA

#cmakedefine PHIST_MVECS_ROW_MAJOR
#cmakedefine PHIST_SDMATS_ROW_MAJOR

/* use random number generator prescribed by the kernel lib or our own? 
   The builtin variant may be much faster but the PHIST RNG gives reproducible
   results across runs with different number of processes/threads 
   */
#cmakedefine PHIST_BUILTIN_RNG

/* ESSEX libraries: optional */
#cmakedefine PHIST_HAVE_GHOST
#cmakedefine PHIST_HAVE_ESSEX_PHYSICS

/* third party libraries: optional */

/* Trilinos */
#cmakedefine PHIST_HAVE_TEUCHOS
#cmakedefine PHIST_HAVE_KOKKOS
#cmakedefine PHIST_HAVE_ANASAZI
#cmakedefine PHIST_HAVE_BELOS

/* other TPLs */
#cmakedefine PHIST_HAVE_MKL
#cmakedefine PHIST_HAVE_PARMETIS
#cmakedefine PHIST_HAVE_COLPACK
#cmakedefine PHIST_HAVE_LIKWID
/* do we have access to MPACK (multi-precision BLAS/LAPACK and GMP (GNU Multiple Precision library)
 * This is currently not used/implemented.
 */
#cmakedefine PHIST_HAVE_MPACK_GMP
/* MPACK with QD library, used in robust SVQB with builtin kernels 
 */
#cmakedefine PHIST_HAVE_MPACK_QD


/* timing/profiling/benchmarking behavior */
#cmakedefine LIKWID_PERFMON
#cmakedefine PHIST_TIMEMONITOR
#cmakedefine PHIST_TIMEMONITOR_PERLINE
#cmakedefine PHIST_USE_TEUCHOS_TIMEMONITOR
#cmakedefine PHIST_TIMINGS_FULL_TRACE
#cmakedefine PHIST_PERFCHECK
#cmakedefine PHIST_PERFCHECK_REALISTIC
#cmakedefine PHIST_BENCH_LARGE_N ${PHIST_BENCH_LARGE_N}

/* specific settings to tune the GHOST performance */
#ifdef PHIST_KERNEL_LIB_GHOST
#cmakedefine PHIST_SELL_C ${PHIST_SELL_C}
#cmakedefine PHIST_SELL_SIGMA ${PHIST_SELL_SIGMA}
#endif

#cmakedefine PHIST_KERNEL_LIB_BUILTIN_PIN_THREADS

/* disallow Trilinos versions newer than 11.12.x because they have a
   new interface to Tpetra/Kokkos/TSQR (cf. #124)
*/
#ifdef PHIST_HAVE_KOKKOS
#include "Trilinos_version.h"
#if ((TRILINOS_MAJOR_VERSION>11)||((TRILINOS_MAJOR_VERSION==11)&&(TRILINOS_MINOR_VERSION>1112)))
#warning "Trilinos version >11.12 is not fully supported by PHIST, yet (cf. issue #124)"
#else
#define OLD_TRILINOS
#endif
#endif
#endif
