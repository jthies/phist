#include "phist_config.h"

#ifdef PHIST_HAVE_MPI
#include <mpi.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#ifdef PHIST_HAVE_LIKWID
#include "likwid.h"
#endif

#include "phist_macros.h"
#include "phist_enums.h"
#include "phist_kernels.h"
#include "phist_operator.h"
#include "phist_jadaOp.hpp"
#include ${PHIST_TG_HFILE}
#include "phist_ScalarTraits.hpp"
#include "phist_driver_utils.h"

typedef phist::ScalarTraits<_ST_> st;

int main(int argc, char** argv)
{
  int rank, num_proc;
  int ierr;
  int verbose;

  comm_ptr_t comm = NULL;
  crsMat_ptr_t A = NULL;
  TYPE(op) opA;
  _ST_* sigma = NULL;
  TYPE(op) jadaOp;
  const_map_ptr_t map = NULL;
  mvec_ptr_t x = NULL;
  mvec_ptr_t y = NULL;
  mvec_ptr_t q = NULL;
  
  PHIST_ICHK_IERR(phist_kernels_init(&argc,&argv,&ierr),ierr);
PHIST_MAIN_TASK_BEGIN
  PHIST_ICHK_IERR(phist_comm_create(&comm,&ierr),ierr);

  PHIST_ICHK_IERR(phist_comm_get_rank(comm, &rank,&ierr),ierr);
  PHIST_ICHK_IERR(phist_comm_get_size(comm, &num_proc,&ierr),ierr);

  verbose= (rank==0);

  if (argc<4)
  {
    PHIST_SOUT(PHIST_INFO,"Usage: %s <matrix> <nprojvecs> <nvecs>\n", argv[0]);
    // print usage message for creating/reading a matrix
    SUBR(create_matrix)(NULL, NULL, "usage",&ierr);
    return 1;
  }

  const char* matname=argv[1];
  int nproj = atoi(argv[2]);
  int nvecs = atoi(argv[3]);
  

  PHIST_ICHK_IERR(SUBR(create_matrix)(&A, comm, matname, &ierr),ierr);
  PHIST_ICHK_IERR(SUBR(crsMat_get_domain_map)(A, &map,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&x,map,nvecs,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&y,map,nvecs,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(op_wrap_crsMat)(&opA,A,&ierr),ierr);
  sigma = new _ST_[nvecs];
  for(int i = 0; i < nvecs; i++)
    sigma[i] = st::rand();
  PHIST_ICHK_IERR(SUBR(mvec_create)(&q,map,nproj,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(mvec_put_value)(q,st::zero(),&ierr),ierr);
  // set q vectors to unit vectors
  {
    lidx_t ldq;
    _ST_* q_raw;
    PHIST_ICHK_IERR(SUBR(mvec_extract_view)(q,&q_raw,&ldq,&ierr),ierr);
    for(int i = 0; i < nproj; i++)
      q_raw[i*ldq+i] = st::one();
  }
  PHIST_ICHK_IERR(SUBR(jadaOp_create)(&opA,NULL,q,NULL,sigma,nvecs,&jadaOp,&ierr),ierr);

  PHIST_ICHK_IERR(SUBR(mvec_put_value)(x,st::one(),&ierr),ierr);

  for(int i = 0; i < 120/nvecs; i++)
  {
#ifdef PHIST_HAVE_LIKWID
#pragma omp parallel
    {
      LIKWID_MARKER_START("jadaOp_times");
    }
#endif

    PHIST_ICHK_IERR(jadaOp.apply(st::one(),jadaOp.A,x,st::zero(),y,&ierr),ierr);

#ifdef PHIST_HAVE_LIKWID
#pragma omp parallel
    {
      LIKWID_MARKER_STOP("jadaOp_times");
    }
#endif
  }
  PHIST_ICHK_IERR(SUBR(jadaOp_delete)(&jadaOp,&ierr),ierr);
  delete[] sigma;
  PHIST_ICHK_IERR(SUBR(mvec_delete)(q,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(x,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(y,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(crsMat_delete)(A,&ierr),ierr);

  PHIST_ICHK_IERR(phist_kernels_finalize(&ierr),ierr);

  PHIST_MAIN_TASK_END
  return ierr;
}
