#include "phist_config.h"

#ifdef PHIST_HAVE_MPI
#include <mpi.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#ifdef PHIST_HAVE_LIKWID
#include "likwid.h"
#endif

#include "phist_macros.h"
#include "phist_enums.h"
#include "phist_kernels.h"
#include "phist_operator.h"
#include "phist_jadaOp.hpp"
#include ${PHIST_TG_HFILE}
#include "phist_ScalarTraits.hpp"
#include "phist_driver_utils.h"

typedef phist::ScalarTraits<_ST_> st;

int main(int argc, char** argv)
{
  int rank, num_proc;
  int iflag;
  int verbose;
  int i=0;
  int convergence = 0;
  

  comm_ptr_t comm = NULL;
  sparseMat_ptr_t A = NULL;
  sparseMat_ptr_t H = NULL;
  TYPE(op) opA;
  _ST_* sigma = NULL;
  _ST_* alpha = NULL;
  _ST_* new_beta = NULL;
  _ST_* beta = NULL;
  _ST_* rho1 = NULL;
  _ST_* rho2 = NULL;
  _ST_* rho3 = NULL;
  _ST_* eta = NULL;
  _ST_* gamma1 = NULL;
  _ST_* gamma2 = NULL;
  _ST_* sigmai = NULL;
  _ST_* sigmaimin1 = NULL;
  _ST_* sigmaiplus1 = NULL;
  _ST_* delta = NULL;
  _ST_* scalebuf = NULL;
  _ST_* residue = NULL;

  TYPE(op) jadaOp;
  const_map_ptr_t map = NULL;
  mvec_ptr_t x = NULL;
  mvec_ptr_t y = NULL;
  mvec_ptr_t z = NULL;
  mvec_ptr_t b = NULL;
  mvec_ptr_t omegai = NULL;
  mvec_ptr_t omegamin1 = NULL;
  mvec_ptr_t omegamin2 = NULL;
  mvec_ptr_t solution = NULL;
  mvec_ptr_t swapbuf = NULL;
  mvec_ptr_t q = NULL;
  //mvec_ptr_t V = NULL;  //vector V for minres
  sdMat_ptr_t R = NULL;
  
  PHIST_ICHK_IERR(phist_kernels_init(&argc,&argv,&iflag),iflag);
PHIST_MAIN_TASK_BEGIN
  PHIST_ICHK_IERR(phist_comm_create(&comm,&iflag),iflag);

  PHIST_ICHK_IERR(phist_comm_get_rank(comm, &rank,&iflag),iflag);
  PHIST_ICHK_IERR(phist_comm_get_size(comm, &num_proc,&iflag),iflag);

  verbose= (rank==0);

  if (argc<4)
  {
    PHIST_SOUT(PHIST_INFO,"Usage: %s <matrix> <nprojvecs> <nvecs> [<repart>]\n", argv[0]);
    // print usage message for creating/reading a matrix
    SUBR(create_matrix)(NULL, NULL, "usage",&iflag);
    return 1;
  }

  const char* matname=argv[1];
  int nproj = atoi(argv[2]);
  int nvecs = atoi(argv[3]);
  int repart=0;
  if (argc>4)
  {
    repart=atoi(argv[4]);
  }
  

  iflag=repart?PHIST_SPARSEMAT_REPARTITION: PHIST_IFLAG_DEFAULT;
  PHIST_ICHK_IERR(SUBR(create_matrix)(&A, comm, matname, &iflag),iflag);
  PHIST_ICHK_IERR(SUBR(sparseMat_get_domain_map)(A, &map,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&x,map,nvecs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&z,map,nvecs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&y,map,nvecs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&b,map,nvecs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&omegai,map,nvecs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&omegamin1,map,nvecs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&omegamin2,map,nvecs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&solution,map,nvecs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(op_wrap_sparseMat)(&opA,A,&iflag),iflag);
  sigma = new _ST_[nvecs];
  for(int i = 0; i < nvecs; i++)
    sigma[i] = st::zero();
  PHIST_ICHK_IERR(SUBR(mvec_create)(&q,map,nproj,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_put_value)(q,st::zero(),&iflag),iflag);  
  
  

  //PHIST_ICHK_IERR(SUBR(mvec_create)(&V,map,nvecs,&iflag),iflag);
  //PHIST_ICHK_IERR(SUBR(mvec_random)(V,&iflag),iflag);
  //PHIST_ICHK_IERR(SUBR(mvec_QR)(V,R,&iflag), iflag);
  // set q vectors to unit vectors
  {
    lidx_t ldq;
    _ST_* q_raw;
    PHIST_ICHK_IERR(SUBR(mvec_extract_view)(q,&q_raw,&ldq,&iflag),iflag);
    gidx_t ilower;
    PHIST_ICHK_IERR(phist_map_get_ilower(map,&ilower,&iflag),iflag);
    if(ilower == 0)
    {
      for(int i = 0; i < nproj; i++)
        q_raw[i*ldq+i] = st::one();
    }
  }
  PHIST_ICHK_IERR(SUBR(jadaOp_create)(&opA,NULL,q,NULL,sigma,nvecs,&jadaOp,&iflag),iflag);

  PHIST_ICHK_IERR(SUBR(mvec_put_value)(solution,st::zero(),&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_put_value)(x,st::one(),&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_put_value)(z,st::zero(),&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_put_value)(omegai,st::zero(),&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_put_value)(omegamin1,st::zero(),&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_put_value)(omegamin2,st::zero(),&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_put_value)(omegamin2,st::zero(),&iflag),iflag);

  // ----- Setup right hand side -----
  // x <- (I-qq^T)x
  TYPE(sdMat_ptr) qTx = NULL;
  PHIST_ICHK_IERR(SUBR(sdMat_create)(&qTx,nproj,nvecs,comm,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvecT_times_mvec)(st::one(),q,x,st::zero(),qTx,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_times_sdMat)(-st::one(),q,qTx,st::one(),x,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(sdMat_delete)(qTx,&iflag),iflag);
  // y <- A*x //y=b 
  PHIST_ICHK_IERR(jadaOp.apply(st::one(),jadaOp.A,x,st::zero(),y,&iflag),iflag);
  //SUBR(mvec_print)(y,&iflag);
  PHIST_ICHK_IERR(SUBR(mvec_add_mvec)(st::one(),y,st::zero(),b,&iflag),iflag);

  // copy result back to x
  PHIST_ICHK_IERR(SUBR(mvec_add_mvec)(st::one(),y,st::zero(),x,&iflag),iflag);
  
  
  _MT_ *resNorm = new _MT_[nvecs];  

  new_beta = new _ST_[nvecs];
  residue = new _ST_[nvecs];
  scalebuf = new _ST_[nvecs];
  alpha = new _ST_[nvecs];
  beta = new _ST_[nvecs];
  eta = new _ST_[nvecs];
  rho1 = new _ST_[nvecs];
  rho2 = new _ST_[nvecs];
  rho3 = new _ST_[nvecs];
  delta = new _ST_[nvecs];
  

  gamma1 = new _ST_[nvecs];
  for(int i = 0; i < nvecs; i++)
    gamma1[i] = st::one();

  gamma2 = new _ST_[nvecs];
  for(int i = 0; i < nvecs; i++)
    gamma2[i] = st::one();

  sigmai = new _ST_[nvecs];
  for(int i = 0; i < nvecs; i++)
    sigmai[i] = st::zero();

  sigmaimin1 = new _ST_[nvecs];
  for(int i = 0; i < nvecs; i++)
    sigmaimin1[i] = st::zero();

  sigmaiplus1 = new _ST_[nvecs];
  for(int i = 0; i < nvecs; i++)
    sigmaiplus1[i] = st::zero();

  
  //setup startbeta=startresidue
  PHIST_ICHK_IERR(SUBR(mvec_dot_mvec)(y, y, beta, &iflag), iflag);
  for (int j = 0; j < nvecs; j++)
    beta[j] = st::sqrt(beta[j]);
    
  for (int k = 0; k < nvecs; k++)
    {
      eta[k] = beta[k];
      residue[k] = beta[k];
    }
  //for (int l = 0; l < nvecs; l++)
  //{
  

    /////START MINRES/////
    while(st::abs(residue[0]) > 1e-12)
    { 
    /////LANCZOS START/////
      for (int j = 0; j < nvecs; j++)
      {
        scalebuf[j] = st::one()/beta[j];
      }
    
      //scale x
      PHIST_ICHK_IERR(SUBR(mvec_vscale)(x,scalebuf,&iflag),iflag);
    
      //y=(1-VV^T)(A-sigma1)x
      PHIST_ICHK_IERR(jadaOp.apply(st::one(),jadaOp.A,x,st::zero(),y,&iflag),iflag);

      //alpha=x^Ty
      PHIST_ICHK_IERR(SUBR(mvec_dot_mvec)(x, y, alpha, &iflag), iflag);

      for (int k = 0; k < nvecs; k++)
        alpha[k]=-alpha[k];
    
      for (int k = 0; k < nvecs; k++)
        beta[k]=-beta[k];
    
      //y=y-alpha*x
      PHIST_ICHK_IERR(SUBR(mvec_vadd_mvec)(alpha,x,st::one(),y,&iflag),iflag);
      //y=y-beta*z
      PHIST_ICHK_IERR(SUBR(mvec_vadd_mvec)(beta,z,st::one(),y,&iflag),iflag);  

    

      //compute new beta
      PHIST_ICHK_IERR(SUBR(mvec_dot_mvec)(y, y, new_beta, &iflag), iflag);
    
      for (int j = 0; j < nvecs; j++)
        new_beta[j] = st::sqrt(new_beta[j]);
    

      /////OLD GIVENS ROTATION ON NEW COLUMN OF T/////
  
      for (int k = 0; k < nvecs; k++)
      {
        delta[k] = gamma2[k]*(-alpha[k])-gamma1[k]*sigmai[k]*(-beta[k]);
      }
      
      for (int k = 0; k < nvecs; k++)
      {
        rho1[k] = delta[k]*delta[k]+new_beta[k]*new_beta[k];
        rho1[k] = st::sqrt(rho1[k]);
      }
      
      for (int k = 0; k < nvecs; k++)
      {
        rho2[k] = sigmai[k]*(-alpha[k])+gamma1[k]*gamma2[k]*(-beta[k]);
      }
      
      for (int k = 0; k < nvecs; k++)
      {
        rho3[k] = sigmaimin1[k]*(-beta[k]);
      }

      /////NEW GIVENS ROTATION/////
      for (int k = 0; k < nvecs; k++)
      {
        gamma1[k] = gamma2[k];
        gamma2[k] = delta[k] / rho1[k];
      }

      for (int k = 0; k < nvecs; k++)
      {
        sigmaiplus1[k] = new_beta[k] / rho1[k];
      }
      /////UPDATE OF SOLUTION/////
      for (int k = 0; k < nvecs; k++)
      {
        rho2[k] = -rho2[k];
        rho3[k] = -rho3[k];
      }
      //y=y-rho3*omegamin2-rho2*omegamin1
      PHIST_ICHK_IERR(SUBR(mvec_add_mvec)(st::one(),x,st::zero(),omegai,&iflag),iflag);
      PHIST_ICHK_IERR(SUBR(mvec_vadd_mvec)(rho3,omegamin2,st::one(),omegai,&iflag),iflag);
      PHIST_ICHK_IERR(SUBR(mvec_vadd_mvec)(rho2,omegamin1,st::one(),omegai,&iflag),iflag);

      for (int k = 0; k < nvecs; k++)
      {
        scalebuf[k] = st::one()/rho1[k];
      }
      PHIST_ICHK_IERR(SUBR(mvec_vscale)(omegai,scalebuf,&iflag),iflag);

      //compute solutionvector
      for (int k = 0; k < nvecs; k++)
      {
        scalebuf[k] = gamma2[k]*eta[k];
      }
      
      PHIST_ICHK_IERR(SUBR(mvec_vadd_mvec)(scalebuf,omegai,st::one(),solution,&iflag),iflag);
      
      

      //compute residue
      for (int k = 0; k < nvecs; k++)
      {
        residue[k] = st::abs(sigmaiplus1[k])*residue[k];
      }
      PHIST_SOUT(PHIST_INFO,"residue %e\n", residue[0]);

      for (int k = 0; k < nvecs; k++)
      {
        eta[k] = -sigmaiplus1[k]*eta[k];
      }
      
    

#ifdef TESTING
    //check orthogonality. It's not neccessary. I leave it for tests
    _ST_ yTz[nvecs], yTx[nvecs];
    SUBR(mvec_dot_mvec)(y,x,yTx,&iflag);
    SUBR(mvec_dot_mvec)(y,z,yTz,&iflag);
    PHIST_SOUT(PHIST_INFO,"y^Tx %e, y^Tz %e\n", yTx[0],yTz[0]);
#endif
    //swap pointer beta
    std::swap(beta,new_beta);

    //omega pointer swap
    std::swap(omegamin2,omegamin1);
    std::swap(omegamin1,omegai);

    //pointer swap sigma
    std::swap(sigmaimin1,sigmai);
    std::swap(sigmai,sigmaiplus1);

    //pointer swap
    std::swap(z,x);
    std::swap(x,y);
#ifdef TESTING
    //absolute error. Also not neccessary. Just for tests
    PHIST_ICHK_IERR(SUBR(mvec_add_mvec)(st::one(),b,st::zero(),y,&iflag),iflag);
    PHIST_ICHK_IERR(jadaOp.apply(st::one(),jadaOp.A,solution,-st::one(),y,&iflag),iflag);
    PHIST_ICHK_IERR(SUBR(mvec_norm2)(y,resNorm,&iflag),iflag);
    //PHIST_SOUT(PHIST_INFO,"absolut Fehler: %e\n", resNorm[0]);
#endif
      
    
    i++;


    }

  //PHIST_ICHK_IERR(jadaOp.apply(st::one(),jadaOp.A,solution,st::zero(),y,&iflag),iflag);
  //SUBR(mvec_print)(y,&iflag);
  PHIST_ICHK_IERR(SUBR(jadaOp_delete)(&jadaOp,&iflag),iflag);
  delete[] sigma;
  PHIST_ICHK_IERR(SUBR(mvec_delete)(q,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(x,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(y,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(sparseMat_delete)(A,&iflag),iflag);

PHIST_MAIN_TASK_END
  PHIST_ICHK_IERR(phist_kernels_finalize(&iflag),iflag);

  return iflag;
}
