/*******************************************************************************************/
/* This file is part of the PHIST software available at https://bitbucket.org/essex/phist/ */
/* You may redistribute it and/or modify it under the terms of the BSD-style licence       */
/* included in this software.                                                              */
/*                                                                                         */
/* Contact: Jonas Thies (j.thies@tudelft.nl)                                               */
/*                                                                                         */
/*******************************************************************************************/
#include "phist_config.h"

#ifdef PHIST_HAVE_MPI
#include <mpi.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#ifdef PHIST_HAVE_LIKWID
#include "likwid.h"
#endif

#include "phist_tools.h"
#include "phist_kernels.h"
#include "phist_core.h"

#include ${PHIST_TG_HFILE}

#include "phist_driver_utils_decl.h"

typedef phist::ScalarTraits<_ST_> st;

int main(int argc, char** argv)
{
#include "phist_std_typedefs.hpp"
  int iflag = 0;

  phist_comm_ptr comm = NULL;
  sparseMat_ptr A = NULL;
  phist_const_map_ptr map = NULL;
  mvec_ptr x = NULL, r = NULL, p = NULL, p_prev, q = NULL, xExact = NULL, b = NULL;
  sdMat_ptr rho = NULL, rho_prev = NULL, qTp = NULL, alpha = NULL, beta = NULL;
  
  PHIST_ICHK_IERR(phist_kernels_init(&argc,&argv,&iflag),iflag);
PHIST_MAIN_TASK_BEGIN
  PHIST_ICHK_IERR(phist_comm_create(&comm,&iflag),iflag);

  if (argc<3)
  {
    PHIST_SOUT(PHIST_INFO,"Usage: %s <matrix> <nvecs> [<maxIter>] [<desiredRes>] [<high-prec>] [<repart>]\n", argv[0]);
    // print usage message for creating/reading a matrix
    SUBR(create_matrix)(NULL, NULL, "usage",&iflag);
    return 1;
  }

  const char* matname=argv[1];
  int nvecs = atoi(argv[2]);
  int maxIter = 1000;
  if( argc > 3 )
    maxIter = atoi(argv[3]);
  MT desiredRes = mt::sqrt(mt::eps());
  if( argc > 4 )
    desiredRes = (MT)atof(argv[4]);
  int high_prec = PHIST_IFLAG_DEFAULT;
  if( argc > 5 )
    high_prec = atoi(argv[5]) ? PHIST_ROBUST_REDUCTIONS : PHIST_IFLAG_DEFAULT;
  int repart = PHIST_IFLAG_DEFAULT;
  if( argc > 6 )
    repart = atoi(argv[6]) ? PHIST_SPARSEMAT_PERM_GLOBAL : PHIST_IFLAG_DEFAULT;

  // create matrix and vectors
  iflag = repart;
  PHIST_ICHK_IERR(SUBR(create_matrix)(&A, comm, matname, &iflag),iflag);
  PHIST_ICHK_IERR(SUBR(sparseMat_get_domain_map)(A, &map,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&x,map,nvecs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&xExact,map,nvecs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&b,map,nvecs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&r,map,nvecs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&p,map,nvecs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&p_prev,map,nvecs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&q,map,nvecs,&iflag),iflag);

  // setup RHS
  {
    phist_gidx ilower;
    PHIST_ICHK_IERR(phist_map_get_ilower(map,&ilower,&iflag),iflag);
    phist_lidx nlocal;
    PHIST_ICHK_IERR(SUBR(mvec_my_length)(xExact,&nlocal,&iflag),iflag);
    phist_lidx ldx;
    ST* x_raw;
    PHIST_ICHK_IERR(SUBR(mvec_extract_view)(xExact,&x_raw,&ldx,&iflag),iflag);
    for(phist_lidx i = 0; i < nlocal; i++)
    {
      for(int j = 0; j < nvecs; j++)
      {
        ST val = ST(  ((ilower+i)%2-0.5)*cos(0.1*(ilower+i)) );
#ifdef PHIST_MVECS_ROW_MAJOR
        x_raw[i*ldx+j] = val;
#else
        x_raw[j*ldx+i] = val;
#endif
      }
    }
  }
  PHIST_ICHK_IERR(SUBR(sparseMat_times_mvec)(st::one(),A,xExact,st::zero(),b,&iflag),iflag);

  PHIST_ICHK_IERR(SUBR(mvec_add_mvec)(st::one(),b,st::zero(),r,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_put_value)(x,st::zero(),&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_put_value)(p,st::zero(),&iflag),iflag);

  // create sdMats for high precision scalar factors
  PHIST_ICHK_IERR(SUBR(sdMat_create)(&rho,nvecs,nvecs,comm,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(sdMat_identity)(rho,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(sdMat_create)(&rho_prev,nvecs,nvecs,comm,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(sdMat_create)(&qTp,nvecs,nvecs,comm,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(sdMat_create)(&alpha,nvecs,nvecs,comm,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(sdMat_create)(&beta,nvecs,nvecs,comm,&iflag),iflag);
  ST *rho_raw = NULL;
  phist_lidx lda_rho;
  PHIST_ICHK_IERR(SUBR(sdMat_extract_view)(rho,&rho_raw,&lda_rho,&iflag),iflag);

  for(int i = 0; i <= maxIter; i++)
  {
    // rho_i = r_i^T r_i
    PHIST_ICHK_IERR(SUBR(sdMat_add_sdMat)(st::one(),rho,st::zero(),rho_prev,&iflag),iflag);
    iflag = high_prec;
    PHIST_ICHK_IERR(SUBR(mvecT_times_mvec)(st::one(),r,r,st::zero(),rho,&iflag),iflag);
    PHIST_SOUT(PHIST_INFO,"CG iteration %d, est. residual norm:",i);
    bool firstConverged = false;
    for(int j = 0; j < nvecs; j++)
    {
      MT resj = mt::sqrt(st::real(rho_raw[lda_rho*j+j]));
      PHIST_SOUT(PHIST_INFO,"\t%e",resj);
      firstConverged = firstConverged || resj < desiredRes;
    }
    PHIST_SOUT(PHIST_INFO,"\n");
    if( firstConverged || i == maxIter )
      break;

    // beta_i = rho_i / rho_(i-1)
    int perm[nvecs], rank;
    _MT_ rankTol=mt::zero();
    PHIST_ICHK_IERR(SUBR(sdMat_cholesky)(rho_prev, perm, &rank, rankTol,&iflag),iflag);
    PHIST_ICHK_IERR(SUBR(sdMat_add_sdMat)(st::one(),rho,st::zero(),beta,&iflag),iflag);
    PHIST_ICHK_IERR(SUBR(sdMat_backwardSubst_sdMat)(rho_prev,perm,rank,beta,&iflag),iflag);
    PHIST_ICHK_IERR(SUBR(sdMat_forwardSubst_sdMat)(rho_prev,perm,rank,beta,&iflag),iflag);
    // p_(i+1) = r_i + beta_i*p_i
    // TODO: should be one operation
    std::swap(p,p_prev);
    PHIST_ICHK_IERR(SUBR(mvec_add_mvec)(st::one(),r,st::zero(),p,&iflag),iflag);
    iflag = high_prec;
    PHIST_ICHK_IERR(SUBR(mvec_times_sdMat)(st::one(),p_prev,beta,st::one(),p,&iflag),iflag);

    // q_(i+1) = A*p_(i+1)
    PHIST_ICHK_IERR(SUBR(sparseMat_times_mvec)(st::one(),A,p,st::zero(),q,&iflag),iflag);

    // alpha_(i+1) = rho_i / p_(i+1)^T q_(i+1)
    iflag = high_prec;
    PHIST_ICHK_IERR(SUBR(mvecT_times_mvec)(st::one(),p,q,st::zero(),qTp,&iflag),iflag);
    PHIST_ICHK_IERR(SUBR(sdMat_cholesky)(qTp, perm, &rank, rankTol, &iflag),iflag);
    PHIST_ICHK_IERR(SUBR(sdMat_add_sdMat)(st::one(),rho,st::zero(),alpha,&iflag),iflag);
    PHIST_ICHK_IERR(SUBR(sdMat_backwardSubst_sdMat)(qTp,perm,rank,alpha,&iflag),iflag);
    PHIST_ICHK_IERR(SUBR(sdMat_forwardSubst_sdMat)(qTp,perm,rank,alpha,&iflag),iflag);

    // x_(i+1) = x_i + alpha*p_(i+1)
    iflag = high_prec;
    PHIST_ICHK_IERR(SUBR(mvec_times_sdMat)(st::one(),p,alpha,st::one(),x,&iflag),iflag);
    // r_(i+1) = r_i - alpha*q_(i+1)
    iflag = high_prec;
    PHIST_ICHK_IERR(SUBR(mvec_times_sdMat)(-st::one(),q,alpha,st::one(),r,&iflag),iflag);
  }

  // calculate real residual norms
  PHIST_ICHK_IERR(SUBR(sparseMat_times_mvec)(-st::one(),A,x,st::one(),b,&iflag),iflag);
  iflag = high_prec;
  std::vector<MT> resNorm(nvecs);
  PHIST_ICHK_IERR(SUBR(mvec_norm2)(b,&resNorm[0],&iflag),iflag);
  PHIST_SOUT(PHIST_INFO,"Real residual norm:");
  for(int j = 0; j < nvecs; j++)
  {
    PHIST_SOUT(PHIST_INFO,"\t%e",resNorm[j]);
  }
  PHIST_SOUT(PHIST_INFO,"\n");

  // calculate error norm
  PHIST_ICHK_IERR(SUBR(mvec_add_mvec)(-st::one(),x,st::one(),xExact,&iflag),iflag);
  iflag = high_prec;
  std::vector<MT> errorNorm(nvecs);
  PHIST_ICHK_IERR(SUBR(mvec_norm2)(xExact,&errorNorm[0],&iflag),iflag);
  PHIST_SOUT(PHIST_INFO,"Error norm:");
  for(int j = 0; j < nvecs; j++)
  {
    PHIST_SOUT(PHIST_INFO,"\t%e",errorNorm[j]);
  }
  PHIST_SOUT(PHIST_INFO,"\n");


  PHIST_ICHK_IERR(SUBR(sdMat_delete)(beta,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(sdMat_delete)(alpha,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(sdMat_delete)(qTp,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(sdMat_delete)(rho,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(sdMat_delete)(rho_prev,&iflag),iflag);

  PHIST_ICHK_IERR(SUBR(mvec_delete)(q,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(p_prev,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(p,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(r,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(b,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(xExact,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(x,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(sparseMat_delete)(A,&iflag),iflag);

PHIST_MAIN_TASK_END
  PHIST_ICHK_IERR(phist_kernels_finalize(&iflag),iflag);

  return iflag;
}
