#include "phist_config.h"

#ifdef PHIST_HAVE_MPI
#include <mpi.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#ifdef PHIST_HAVE_LIKWID
#include "likwid.h"
#endif

#include "phist_macros.h"
#include "phist_enums.h"
#include "phist_kernels.h"
#include "phist_operator.h"
#include ${PHIST_TG_HFILE}
#include "phist_ScalarTraits.hpp"
#include "phist_driver_utils.h"

typedef phist::ScalarTraits<_ST_> st;

int main(int argc, char** argv)
{
#include "phist_std_typedefs.hpp"
  int iflag = 0;

  phist_comm_ptr comm = NULL;
  sparseMat_ptr A = NULL;
  phist_const_map_ptr map = NULL;
  mvec_ptr x = NULL, r = NULL, p = NULL, q = NULL, xExact = NULL, b = NULL;
  
  PHIST_ICHK_IERR(phist_kernels_init(&argc,&argv,&iflag),iflag);
PHIST_MAIN_TASK_BEGIN
  PHIST_ICHK_IERR(phist_comm_create(&comm,&iflag),iflag);

  if (argc<3)
  {
    PHIST_SOUT(PHIST_INFO,"Usage: %s <matrix> <nvecs> [<maxIter>] [<desiredRes>] [<high-prec>] [<repart>]\n", argv[0]);
    // print usage message for creating/reading a matrix
    SUBR(create_matrix)(NULL, NULL, "usage",&iflag);
    return 1;
  }

  const char* matname=argv[1];
  int nvecs = atoi(argv[2]);
  int maxIter = 1000;
  if( argc > 3 )
    maxIter = atoi(argv[3]);
  MT desiredRes = mt::sqrt(mt::eps());
  if( argc > 4 )
    desiredRes = (MT)atof(argv[4]);
  int high_prec = PHIST_IFLAG_DEFAULT;
  if( argc > 5 )
    high_prec = atoi(argv[5]) ? PHIST_ROBUST_REDUCTIONS : PHIST_IFLAG_DEFAULT;
  int repart = PHIST_IFLAG_DEFAULT;
  if( argc > 6 )
    repart = atoi(argv[6]) ? PHIST_SPARSEMAT_PERM_GLOBAL : PHIST_IFLAG_DEFAULT;

  // create matrix and vectors
  iflag = repart;
  PHIST_ICHK_IERR(SUBR(create_matrix)(&A, comm, matname, &iflag),iflag);
  PHIST_ICHK_IERR(SUBR(sparseMat_get_domain_map)(A, &map,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&x,map,nvecs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&xExact,map,nvecs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&b,map,nvecs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&r,map,nvecs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&p,map,nvecs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&q,map,nvecs,&iflag),iflag);

  // setup RHS
  {
    phist_gidx ilower;
    PHIST_ICHK_IERR(phist_map_get_ilower(map,&ilower,&iflag),iflag);
    phist_lidx nlocal;
    PHIST_ICHK_IERR(SUBR(mvec_my_length)(xExact,&nlocal,&iflag),iflag);
    phist_lidx ldx;
    ST* x_raw;
    PHIST_ICHK_IERR(SUBR(mvec_extract_view)(xExact,&x_raw,&ldx,&iflag),iflag);
    for(phist_lidx i = 0; i < nlocal; i++)
    {
      for(int j = 0; j < nvecs; j++)
      {
        ST val = ST(  ((ilower+i)%2-0.5)*cos(0.1*(ilower+i)) );
#ifdef PHIST_MVECS_ROW_MAJOR
        x_raw[i*ldx+j] = val;
#else
        x_raw[j*ldx+i] = val;
#endif
      }
    }
  }
  PHIST_ICHK_IERR(SUBR(sparseMat_times_mvec)(st::one(),A,xExact,st::zero(),b,&iflag),iflag);

  PHIST_ICHK_IERR(SUBR(mvec_add_mvec)(st::one(),b,st::zero(),r,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_put_value)(x,st::zero(),&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_put_value)(p,st::zero(),&iflag),iflag);

  std::vector<MT> rho(nvecs,mt::one()), rho_prev(nvecs);
  for(int i = 0; i <= maxIter; i++)
  {
    // rho_i = r_i^T r_i
    rho_prev = rho;
    iflag = high_prec;
    PHIST_ICHK_IERR(SUBR(mvec_norm2)(r,&rho[0],&iflag),iflag);
    PHIST_SOUT(PHIST_INFO,"CG iteration %d, est. residual norm:",i);
    bool firstConverged = false;
    for(int j = 0; j < nvecs; j++)
    {
      // we calculated sqrt(rho)...
      PHIST_SOUT(PHIST_INFO,"\t%e",rho[j]);
      firstConverged = firstConverged || rho[j] < desiredRes;
      rho[j] = rho[j]*rho[j];
    }
    PHIST_SOUT(PHIST_INFO,"\n");
    if( firstConverged || i == maxIter )
      break;

    // beta_i = rho_i / rho_(i-1)
    std::vector<ST> beta(nvecs);
    for(int j = 0; j < nvecs; j++)
      beta[j] = (ST) rho[j] / rho_prev[j];
    // p_(i+1) = r_i + beta_i*p_i
    // TODO: should be one vadd-operation -> requires more general mvec_vadd_mvec interface!
    //std::vector<ST> one(nvecs,st::one());
    //PHIST_ICHK_IERR(SUBR(mvec_vadd_mvec)(&one[0],r,beta,p,&iflag),iflag);
    PHIST_ICHK_IERR(SUBR(mvec_vscale)(p,&beta[0],&iflag),iflag);
    PHIST_ICHK_IERR(SUBR(mvec_add_mvec)(st::one(),r,st::one(),p,&iflag),iflag);

    // q_(i+1) = A*p_(i+1)
    PHIST_ICHK_IERR(SUBR(sparseMat_times_mvec)(st::one(),A,p,st::zero(),q,&iflag),iflag);

    // alpha_(i+1) = rho_i / p_(i+1)^T q_(i+1)
    std::vector<ST> alpha(nvecs);
    iflag = high_prec;
    PHIST_ICHK_IERR(SUBR(mvec_dot_mvec)(p,q,&alpha[0],&iflag),iflag);
    for(int j = 0; j < nvecs; j++)
      alpha[j] = rho[j] / alpha[j];

    // x_(i+1) = x_i + alpha*p_(i+1)
    PHIST_ICHK_IERR(SUBR(mvec_vadd_mvec)(&alpha[0],p,st::one(),x,&iflag),iflag);
    // r_(i+1) = r_i - alpha*p_(i+1)
    for(int j = 0; j < nvecs; j++)
      alpha[j] = -alpha[j];
    PHIST_ICHK_IERR(SUBR(mvec_vadd_mvec)(&alpha[0],q,st::one(),r,&iflag),iflag);
  }

  // calculate real residual norms
  PHIST_ICHK_IERR(SUBR(sparseMat_times_mvec)(-st::one(),A,x,st::one(),b,&iflag),iflag);
  iflag = high_prec;
  PHIST_ICHK_IERR(SUBR(mvec_norm2)(b,&rho[0],&iflag),iflag);
  PHIST_SOUT(PHIST_INFO,"Real residual norm:");
  for(int j = 0; j < nvecs; j++)
  {
    PHIST_SOUT(PHIST_INFO,"\t%e",rho[j]);
  }
  PHIST_SOUT(PHIST_INFO,"\n");

  // calculate error norm
  PHIST_ICHK_IERR(SUBR(mvec_add_mvec)(-st::one(),x,st::one(),xExact,&iflag),iflag);
  iflag = high_prec;
  PHIST_ICHK_IERR(SUBR(mvec_norm2)(xExact,&rho[0],&iflag),iflag);
  PHIST_SOUT(PHIST_INFO,"Error norm:");
  for(int j = 0; j < nvecs; j++)
  {
    PHIST_SOUT(PHIST_INFO,"\t%e",rho[j]);
  }
  PHIST_SOUT(PHIST_INFO,"\n");



  PHIST_ICHK_IERR(SUBR(mvec_delete)(q,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(p,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(r,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(b,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(xExact,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(x,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(sparseMat_delete)(A,&iflag),iflag);

PHIST_MAIN_TASK_END
  PHIST_ICHK_IERR(phist_kernels_finalize(&iflag),iflag);

  return iflag;
}
