#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#ifdef PHIST_HAVE_LIKWID
#include "likwid.h"
#endif

#include "phist_macros.h"
#include "phist_enums.h"
#include "phist_kernels.h"
#include "phist_operator.h"
#include "phist_driver_utils.h"
#include <Teuchos_TimeMonitor.hpp>
#include ${PHIST_TG_HFILE}
#include "phist_ScalarTraits.hpp"

typedef phist::ScalarTraits<_ST_> st;

int main(int argc, char** argv)
{
  int rank, num_proc;
  int ierr;
  int verbose;

  comm_ptr_t comm = NULL;
  crsMat_ptr_t A = NULL;
  const_map_ptr_t map = NULL;
  mvec_ptr_t x = NULL;
  mvec_ptr_t y = NULL;
  sdMat_ptr_t XH = NULL;
  
  char* filename = NULL;
  
#ifdef PHIST_HAVE_LIKWID
  likwid_markerInit();
#endif
  PHIST_ICHK_IERR(phist_kernels_init(&argc,&argv,&ierr),ierr);
  PHIST_ICHK_IERR(phist_comm_create(&comm,&ierr),ierr);

  PHIST_ICHK_IERR(phist_comm_get_rank(comm, &rank,&ierr),ierr);
  PHIST_ICHK_IERR(phist_comm_get_size(comm, &num_proc,&ierr),ierr);

  verbose= (rank==0);

  if (argc<3)
  {
    if (verbose) fprintf(stdout,"Usage: %s <matrix filename> <nvecs>\n", argv[0]);
    return 1;
  }

  filename = argv[1];
  int nvecs = atoi(argv[2]);
  

  PHIST_ICHK_IERR(SUBR(crsMat_read_mm)(&A,filename,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(crsMat_get_domain_map)(A, &map,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&x,map,nvecs,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&y,map,nvecs,&ierr),ierr);

  PHIST_ICHK_IERR(SUBR(mvec_random)(x,&ierr),ierr);

  Teuchos::RCP<Teuchos::Time> time = Teuchos::TimeMonitor::getNewTimer("crsMat_times_mvec");
  for(int i = 0; i < 120/nvecs; i++)
  {
    Teuchos::TimeMonitor timeMon( *time );

#ifdef PHIST_HAVE_LIKWID
    likwid_markerStartRegion("crsMat_times_mvec");
#endif

    PHIST_ICHK_IERR(SUBR(crsMat_times_mvec)(st::one(),A,x,st::zero(),y,&ierr),ierr);

#ifdef PHIST_HAVE_LIKWID
    likwid_markerStopRegion("crsMat_times_mvec");
#endif
  }
  Teuchos::TimeMonitor::summarize();

  PHIST_ICHK_IERR(SUBR(mvec_delete)(x,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(y,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(crsMat_delete)(A,&ierr),ierr);

  PHIST_ICHK_IERR(phist_kernels_finalize(&ierr),ierr);
#ifdef PHIST_HAVE_LIKWID
  likwid_markerClose();
#endif

  return ierr;
}
