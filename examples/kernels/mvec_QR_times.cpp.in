#include "phist_config.h"

#ifdef PHIST_HAVE_MPI
#include <mpi.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#ifdef PHIST_HAVE_LIKWID
#include "likwid.h"
#endif

#include "phist_macros.h"
#include "phist_enums.h"
#include "phist_kernels.h"
#include "phist_operator.h"

#include "phist_ScalarTraits.hpp"

#include ${PHIST_TG_HFILE}
#include "phist_driver_utils.h"

typedef phist::ScalarTraits<ST> st;
typedef phist::ScalarTraits<MT> mt;

//! benchmark the function mvec_QR, given k, n, m
//! do k times: randomize an n x m mvec and orthogonalize
//! it using mvec_QR.
int main(int argc, char** argv)
{
  int ierr;

  comm_ptr_t comm = NULL;
  map_ptr_t map = NULL;
  mvec_ptr_t X = NULL, Q=NULL;
  sdMat_ptr_t R = NULL, QtQ=NULL;
  
  PHIST_ICHK_IERR(phist_kernels_init(&argc,&argv,&ierr),ierr);

PHIST_MAIN_TASK_BEGIN

  PHIST_ICHK_IERR(phist_comm_create(&comm,&ierr),ierr);

  if (argc!=4 && argc!=5)
  {
    PHIST_SOUT(PHIST_ERROR,"Usage: %s n m k [high_prec]\n"
                           "       perform k times: \n"
                           "       randomize an n x m mvec\n"
                           "       orthogonalize its columns by mvec_QR\n"
                           "       perform other operations mvec_add_mvec, \n"
                           "       mvecT_times_mvec to check for NUMA issues etc.\n"
                           "       set high_prec to 1 to use high-precision kernels\n",
                           argv[0]);
    return 1;
  }

  gidx_t n;
  int m,k;
  if (sizeof(gidx_t)==4)
  {
    n=atoi(argv[1]);
  }
  else
  {
    n=atol(argv[1]);
  }
  
  m=atoi(argv[2]);
  k=atoi(argv[3]);
  bool high_prec = false;
  if( argc == 5 )
    high_prec = atoi(argv[4]);

  PHIST_ICHK_IERR(phist_map_create(&map,comm,n,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&X,map,m,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&Q,map,m,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(sdMat_create)(&R,m,m,comm,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(sdMat_create)(&QtQ,m,m,comm,&ierr),ierr);
  
  MT total_max_error = mt::zero();

  for (int it=0; it<k; it++)
  {
    // this determines the numa domains (thinking of OpenMP here)
    PHIST_ICHK_IERR(SUBR(mvec_random)(X,&ierr),ierr);
    PHIST_ICHK_IERR(SUBR(mvec_put_value)(Q,st::one(),&ierr),ierr);
    ST pert=st::one()*1.0e-3;
    PHIST_ICHK_IERR(SUBR(mvec_add_mvec)(pert,X,st::one(),Q,&ierr),ierr);
    // this is what we really want to benchmark
    if( high_prec )
      ierr = PHIST_ROBUST_REDUCTIONS;
    PHIST_ICHK_IERR(SUBR(mvec_QR)(Q,R,&ierr),ierr);

    // check the result
    if( high_prec )
      ierr = PHIST_ROBUST_REDUCTIONS;
    PHIST_ICHK_IERR(SUBR(mvecT_times_mvec)(st::one(),Q,Q,st::zero(),QtQ,&ierr),ierr);
    ST* q=NULL;
    lidx_t ldq;
    PHIST_ICHK_IERR(SUBR(sdMat_extract_view)(QtQ,&q,&ldq,&ierr),ierr);
    MT err=mt::zero();
    for (int i=0;i<m;i++)
      for (int j=0;j<m;j++)
      {
        MT val=(i==j)? mt::one() : mt::zero();
        err=std::max(err, std::abs(q[i*ldq+j] - val));
      }
    total_max_error=std::max(err,total_max_error);
  }
  PHIST_SOUT(PHIST_INFO,"Total maximum ortho-error encountered: %8.4e\n",total_max_error);
PHIST_SOUT(PHIST_INFO,"Example for Q^T Q:\n");
PHIST_ICHK_IERR(SUBR(sdMat_print)(QtQ,&ierr),ierr);


  PHIST_ICHK_IERR(SUBR(mvec_delete)(X,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(Q,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(sdMat_delete)(R,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(sdMat_delete)(QtQ,&ierr),ierr);
  PHIST_ICHK_IERR(phist_map_delete(map,&ierr),ierr);

PHIST_MAIN_TASK_END

  PHIST_ICHK_IERR(phist_kernels_finalize(&ierr),ierr);

  return ierr;
}
