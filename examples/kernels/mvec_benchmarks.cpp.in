#include "phist_config.h"

#ifdef PHIST_HAVE_MPI
#include <mpi.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#ifdef PHIST_HAVE_LIKWID
#include "likwid.h"
#endif

#include "phist_macros.h"
#include "phist_enums.h"
#include "phist_kernels.h"
#include "phist_operator.h"

#include "phist_ScalarTraits.hpp"

#include ${PHIST_TG_HFILE}
#include "phist_driver_utils.h"

#define TIME_BENCH_START(label,_m,_k) \
  std::stringstream ss; \
  ss<<"BENCH_"<<label<<"_"<<(_m)<<"_"<<(_k); \
  PHIST_ENTER_FCN(ss.str().c_str());

typedef phist::ScalarTraits<ST> st;
typedef phist::ScalarTraits<MT> mt;

//! benchmark the function mvec_QR, given k, n, m
//! do k times: randomize an n x m mvec and orthogonalize
//! it using mvec_QR.
int main(int argc, char** argv)
{
  int ierr;

  phist_comm_ptr comm = NULL;
  phist_map_ptr map = NULL;
  mvec_ptr X = NULL, Y=NULL;
  sdMat_ptr Cmk=NULL, Ckk=NULL, Cmm2=NULL;
  
  PHIST_ICHK_IERR(phist_kernels_init(&argc,&argv,&ierr),ierr);

PHIST_MAIN_TASK_BEGIN

  PHIST_ICHK_IERR(phist_comm_create(&comm,&ierr),ierr);

  if (argc!=5 && argc!=6)
  {
    PHIST_SOUT(PHIST_ERROR,"Usage: %s n m k l [high_prec]\n"
                           " Constructs X (n x m) and Y (n x k)\n"
                           " and corresponding sdMats Cmm,Cmk,Ckk,Ckm \n"
                           "       perform l times: \n"
                           "    * Cmk=X'Y\n"
                           "    * Ckk=Y'Y\n"
                           "    * X=X+Y*Cmk\n"
                           "    * Y(:,1:m/2)=Y(:,1:m)*Cmm2\n"
                           " where n is the number of rows and m, k the number of columns\n"
                           " set high_prec to 1 to request higher precision calculations!\n",
                           argv[0]);
    return 1;
  }

  phist_gidx n;
  int m,k,l,m_half;
  if (sizeof(phist_gidx)==4)
  {
    n=atoi(argv[1]);
  }
  else
  {
    n=atol(argv[1]);
  }
  
  m=atoi(argv[2]);
  m_half=std::max(m/2,1);
  k=atoi(argv[3]);
  l=atoi(argv[4]);
  bool high_prec = false;
  if( argc == 6 )
    high_prec = atoi(argv[5]);

  PHIST_ICHK_IERR(phist_map_create(&map,comm,n,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&X,map,m,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&Y,map,k,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(sdMat_create)(&Cmk,m,k,comm,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(sdMat_create)(&Ckk,k,k,comm,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(sdMat_create)(&Cmm2,m,m_half,comm,&ierr),ierr);
  
  
  // Cmk=X'Y
  for (int it=0; it<2; it++)
  {
    ST value[m];
    ierr = high_prec?PHIST_ROBUST_REDUCTIONS: 0;
    PHIST_ICHK_IERR(SUBR(mvecT_times_mvec)(st::one(),X,Y,st::zero(),Cmk,&ierr),ierr);
  }
  for (int it=0; it<l; it++)
  {
    TIME_BENCH_START("mvecT_times_mvec",m,k);
    ST value[m];
    ierr = high_prec?PHIST_ROBUST_REDUCTIONS: 0;
    PHIST_ICHK_IERR(SUBR(mvecT_times_mvec)(st::one(),X,Y,st::zero(),Cmk,&ierr),ierr);
  }

  // Ckk=Y'Y
  for (int it=0; it<2; it++)
  {
    ST value[m];
    ierr = high_prec?PHIST_ROBUST_REDUCTIONS: 0;
    PHIST_ICHK_IERR(SUBR(mvecT_times_mvec)(st::one(),Y,Y,st::zero(),Ckk,&ierr),ierr);
  }
  for (int it=0; it<l; it++)
  {
    TIME_BENCH_START("mvecT_times_mvec",k,k);
    ST value[m];
    ierr = high_prec?PHIST_ROBUST_REDUCTIONS: 0;
    PHIST_ICHK_IERR(SUBR(mvecT_times_mvec)(st::one(),Y,Y,st::zero(),Ckk,&ierr),ierr);
  }

  // Y=Y+X*Cmk
  for (int it=0; it<2; it++)
  {
    ST value[m];
    ierr = high_prec?PHIST_ROBUST_REDUCTIONS: 0;
    PHIST_ICHK_IERR(SUBR(mvec_times_sdMat)(st::one(),X,Cmk,-st::one(),Y,&ierr),ierr);
  }
  for (int it=0; it<l; it++)
  {
    TIME_BENCH_START("mvec_times_sdMat",m,k);
    ST value[m];
    ierr = high_prec?PHIST_ROBUST_REDUCTIONS: 0;
    PHIST_ICHK_IERR(SUBR(mvec_times_sdMat)(st::one(),X,Cmk,-st::one(),Y,&ierr),ierr);
  }

  // Y=Y*Ckk
  for (int it=0; it<2; it++)
  {
    ST value[m];
    ierr = high_prec?PHIST_ROBUST_REDUCTIONS: 0;
    PHIST_ICHK_IERR(SUBR(mvec_times_sdMat_inplace)(Y,Ckk,&ierr),ierr);
  }
  for (int it=0; it<l; it++)
  {
    TIME_BENCH_START("mvec_times_sdMat_inplace",k,k);
    ST value[m];
    ierr = high_prec?PHIST_ROBUST_REDUCTIONS: 0;
    PHIST_ICHK_IERR(SUBR(mvec_times_sdMat_inplace)(Y,Ckk,&ierr),ierr);
  }

  // X(:,1:m/2)=X*Cmm2
  for (int it=0; it<2; it++)
  {
    ST value[m];
    ierr = high_prec?PHIST_ROBUST_REDUCTIONS: 0;
    PHIST_ICHK_IERR(SUBR(mvec_times_sdMat_inplace)(X,Cmm2,&ierr),ierr);
  }
  for (int it=0; it<l; it++)
  {
    TIME_BENCH_START("mvec_times_sdMat_inplace",m,m/2);
    ST value[m];
    ierr = high_prec?PHIST_ROBUST_REDUCTIONS: 0;
    PHIST_ICHK_IERR(SUBR(mvec_times_sdMat_inplace)(X,Cmm2,&ierr),ierr);
  }
  
  
  PHIST_ICHK_IERR(SUBR(sdMat_delete)(Ckk,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(sdMat_delete)(Cmk,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(X,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(Y,&ierr),ierr);
  PHIST_ICHK_IERR(phist_map_delete(map,&ierr),ierr);

PHIST_MAIN_TASK_END

  PHIST_ICHK_IERR(phist_kernels_finalize(&ierr),ierr);

  return ierr;
}
