#include "phist_config.h"

#ifdef PHIST_HAVE_MPI
#include <mpi.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#ifdef PHIST_HAVE_LIKWID
#include "likwid.h"
#endif

#include "phist_macros.h"
#include "phist_enums.h"
#include "phist_kernels.h"
#include "phist_operator.h"
#include ${PHIST_TG_HFILE}
#include "phist_driver_utils.h"
#include "phist_ScalarTraits.hpp"

#ifdef PHIST_KERNEL_LIB_GHOST  
#include "ghost.h"
#endif
typedef phist::ScalarTraits<_ST_> st;

#define NUM_SPMVMS 360

// benchmark application for the sparse matrix-vector multiplication (spMVM)
int main(int argc, char** argv)
{
  int rank, num_proc;
  int iflag;
  int verbose;

  comm_ptr_t comm = NULL;
  sparseMat_ptr_t A = NULL;
  const_map_ptr_t map = NULL;
  mvec_ptr_t x = NULL,xv=NULL;
  mvec_ptr_t y = NULL,yv=NULL;
  sdMat_ptr_t XH = NULL;
  
  PHIST_ICHK_IERR(phist_kernels_init(&argc,&argv,&iflag),iflag);
PHIST_MAIN_TASK_BEGIN
  PHIST_ICHK_IERR(phist_comm_create(&comm,&iflag),iflag);

  PHIST_ICHK_IERR(phist_comm_get_rank(comm, &rank,&iflag),iflag);
  PHIST_ICHK_IERR(phist_comm_get_size(comm, &num_proc,&iflag),iflag);

  verbose= (rank==0);

  if (argc<3)
  {
    if (verbose) fprintf(stdout,"Usage: %s <matrix filename|problem string> <nvecs> [<repart>]\n", 
    argv[0]);
    // print usage message for creating/reading a matrix
    SUBR(create_matrix)(NULL,NULL,"usage",&iflag);        
    return 1;
  }

  const char* matname=argv[1];
  int nvecs = atoi(argv[2]);
  
  int repart=0;
  if (argc>3) repart = atoi(argv[3]);
  

  // matrix generation routine from the driver_utils.h header
  iflag=repart?PHIST_SPARSEMAT_REPARTITION: PHIST_IFLAG_DEFAULT;
  PHIST_ICHK_IERR(SUBR(create_matrix)(&A,comm,matname,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(sparseMat_get_domain_map)(A, &map,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&x,map,nvecs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&y,map,nvecs,&iflag),iflag);
  
  PHIST_ICHK_IERR(SUBR(mvec_view_block)(x,&xv,0,nvecs-1,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_view_block)(y,&yv,0,nvecs-1,&iflag),iflag);
  
  PHIST_ICHK_IERR(SUBR(mvec_random)(x,&iflag),iflag);

  for(int i = 0; i < NUM_SPMVMS/nvecs; i++)
  {
    if (argc>3) iflag = atoi(argv[4]);
    PHIST_ENTER_FCN("phist_spmvm");
    PHIST_ICHK_IERR(SUBR(sparseMat_times_mvec)(st::one(),A,x,st::zero(),y,&iflag),iflag);
  }

  for(int i = 0; i < NUM_SPMVMS/nvecs; i++)
  {
    if (argc>3) iflag = atoi(argv[4]);
    PHIST_ENTER_FCN("phist_spmvm_on_full_views");
    PHIST_ICHK_IERR(SUBR(sparseMat_times_mvec)(st::one(),A,xv,st::zero(),yv,&iflag),iflag);
  }

#ifdef PHIST_KERNEL_LIB_GHOST  

   ghost_spmv_flags_t spMVM_opts=GHOST_SPMV_DEFAULT;
    // currently the vector mode is the only one working with MPI and multiple RHS
    spMVM_opts = (ghost_spmv_flags_t)((int)spMVM_opts | (int)GHOST_SPMV_MODE_VECTOR);
    //void* old_scale = A->traits->scale;
    ST beta=st::one();
    ghost_sparsemat_t* gA = (ghost_sparsemat_t*)A;
    ghost_densemat_t* gx = (ghost_densemat_t*)x;
    ghost_densemat_t* gy = (ghost_densemat_t*)y;
    ghost_densemat_t* gxv = (ghost_densemat_t*)xv;
    ghost_densemat_t* gyv = (ghost_densemat_t*)yv;
    ghost_densemat_t* gxv2 = NULL;
    ghost_densemat_t* gyv2 = NULL;
    gx->viewCols(gx,&gxv2,nvecs,0);
    gy->viewCols(gy,&gyv2,nvecs,0);

for(int i = 0; i < NUM_SPMVMS/nvecs; i++)
{
PHIST_ENTER_FCN("ghost_spmvm");
    iflag=ghost_spmv(gy,gA,gx,&spMVM_opts,&beta);
}
for(int i = 0; i < NUM_SPMVMS/nvecs; i++)
{
PHIST_ENTER_FCN("ghost_spmvm_on_full_views");
    iflag=ghost_spmv(gyv,gA,gxv,&spMVM_opts,&beta);
}
for(int i = 0; i < NUM_SPMVMS/nvecs; i++)
{
PHIST_ENTER_FCN("ghost_spmvm_on_fresh_views");
    iflag=ghost_spmv(gyv2,gA,gxv2,&spMVM_opts,&beta);
}
#endif  
  PHIST_ICHK_IERR(SUBR(mvec_delete)(xv,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(yv,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(x,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(y,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(sparseMat_delete)(A,&iflag),iflag);
PHIST_MAIN_TASK_END
  PHIST_ICHK_IERR(phist_kernels_finalize(&iflag),iflag);

  return iflag;
}
