#include "phist_config.h"

#ifdef PHIST_HAVE_MPI
#include <mpi.h>
#endif

#include <string>
#include <sstream>
#include <iostream>

#include "phist_macros.h"
#include "phist_enums.h"
#include "phist_kernels.h"
#include "phist_operator.h"
#include "phist_subspacejada.h"
#include ${PHIST_TG_HFILE}
#include "phist_driver_utils.h"


#include "phist_ScalarTraits.hpp"
#include "phist_std_typedefs.hpp"

int main(int argc, char** argv)
{
  int ierr;
  PHIST_ICHK_IERR(phist_kernels_init(&argc,&argv,&ierr),ierr);

  PHIST_MAIN_TASK_BEGIN

  //------------------------------- parse input parameters ------------------------- 

  // check arguments
  if( argc < 2 )
  {
    PHIST_SOUT(PHIST_ERROR,"Usage: %s <matrix A> [<symmetric/hermitian>] [<invariant subspace dimension>] [<which>] [<tol>] [<max iters> <JD block size> <min basis> <max basis> <GMRES block size> <GMRES subspace dimension> <initial shift> <initial shift iterations> <GMRES use IMGS> <GMRES abort when first converged in block>]\n", argv[0]);
    // print usage message for creating/reading a matrix
    SUBR(create_matrix)(NULL, NULL, "usage",&ierr);

    return 1;
  }
  const char* problem=argv[1];


  bool symmetric = false;
  if( argc > 2 )
  {
    std::istringstream iss(argv[2]);
    iss >> symmetric;
  }

  // number of eigenvalues to compute
  int nEig = 8;
  if( argc > 3 )
  {
    std::istringstream iss(argv[3]);
    iss >> nEig;
  }

  // which eigenvalues to compute
  eigSort_t which = LM;
  if( argc > 4 )
  {
    if( argv[4] == std::string("LM") )
      which = LM;
    else if( argv[4] == std::string("SM") )
      which = SM;
    else if( argv[4] == std::string("LR") )
      which = LR;
    else if( argv[4] == std::string("SR") )
      which = SR;
    else
    {
      PHIST_SOUT(PHIST_ERROR,"error parsing argument 4 <which> ('%s'), it should one of LM, SM, LR or SR\n", argv[4]);
      return 1;
    }
  }

  // desired accuracy: residuum tolerance
  _MT_ tol = mt::eps()*10000;
  if( argc > 5 )
  {
    std::istringstream iss(argv[5]);
    iss >> tol;
    if( tol <= mt::eps() )
    {
      PHIST_SOUT(PHIST_WARNING,"specified tolerance %e is too small! (eps: %e)\n", tol, mt::eps());
    }
  }

  // maximum number of iterations
  int nIter = 250;
  if( argc > 6 )
  {
    std::istringstream iss(argv[6]);
    iss >> nIter;
  }

  // block size
  int blockDim = 4;
  if( argc > 7 )
  {
    std::istringstream iss(argv[7]);
    iss >> blockDim;
  }

  // min basis size
  int minBase = std::min(20,nEig+blockDim);
  if( argc > 8 )
  {
    std::istringstream iss(argv[8]);
    iss >> minBase;
  }

  // max basis size
  int maxBase = std::max(80, minBase+5*blockDim);
  if( argc > 9 )
  {
    std::istringstream iss(argv[9]);
    iss >> maxBase;
  }

  // inner GMRES block size
  int innerBlockDim = std::min(2, blockDim);
  if( argc > 10 )
  {
    std::istringstream iss(argv[10]);
    iss >> innerBlockDim;
  }

  // inner GMRES subspace dimension
  int innerMaxBase = 25;
  if( argc > 11 )
  {
    std::istringstream iss(argv[11]);
    iss >> innerMaxBase;
  }

  // initial shift
  _ST_ initialShift = st::zero();
  if( argc > 12 )
  {
    std::istringstream iss(argv[12]);
    iss >> initialShift;
  }

  // number of initial iterations with fixed initial shift
  int initialShiftIters = 0;
  if( argc > 13 )
  {
    std::istringstream iss(argv[13]);
    iss >> initialShiftIters;
  }

  // in the inner GMRES: use a iterated modified gram schmidt (more accurate, but quite costly!)
  bool innerIMGS = true;
  if( argc > 14 )
  {
    std::istringstream iss(argv[14]);
    iss >> innerIMGS;
  }

  // in the inner GMRES: abort solving a block when first system converged (effectively disables pipelining, but only "blocking" may be faster for now)
  bool innerGMRESabortAfterFirstConverged = false;
  if( argc > 15 )
  {
    std::istringstream iss(argv[15]);
    iss >> innerGMRESabortAfterFirstConverged;
  }


  comm_ptr_t comm = NULL;
  // wrap MPI_COMM_WORLD
  PHIST_ICHK_IERR(phist_comm_create(&comm,&ierr),ierr);

  //------------------------------- setup matrices and vectors --------------------- 

  // we have gathered all input parameters...
  // read or create matrix A using our helper function from driver_utils,
  // which can handle matrix files like name.mm, name.bin etc. but also our
  // favorite test cases spinSZ<N>, graphene<N> etc.
  sparseMat_ptr_t A = NULL;
  PHIST_ICHK_IERR(SUBR(create_matrix)(&A,comm,problem,&ierr), ierr);
  
  // create an operator from A
  op_ptr_t opA = new TYPE(op);
  PHIST_ICHK_IERR(SUBR(op_wrap_sparseMat)(opA,A,&ierr),ierr);

  // we need the domain map of the matrix
  const_map_ptr_t map = NULL;
  PHIST_ICHK_IERR(SUBR(sparseMat_get_domain_map)(A,&map,&ierr),ierr);

  // setup necessary vectors and matrices for the schur form
  mvec_ptr_t Q = NULL;
  PHIST_ICHK_IERR(SUBR(mvec_create)(&Q,map,nEig+blockDim-1,&ierr),ierr);
  sdMat_ptr_t R = NULL;
  PHIST_ICHK_IERR(SUBR(sdMat_create)(&R,nEig+blockDim-1,nEig+blockDim-1,comm,&ierr),ierr);
  _MT_ *resNorm = new _MT_[nEig+blockDim-1];

  // setup start vector (currently to (1 0 1 0 .. ) )
  mvec_ptr_t v0 = NULL;
  PHIST_ICHK_IERR(SUBR(mvec_create)(&v0,map,1,&ierr),ierr);
//  PHIST_ICHK_IERR(SUBR(mvec_random)(v0,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(mvec_put_value)(v0,st::one(),&ierr),ierr);
  // initialize random number generator in parallel
/*
  int ilower, iupper;
  PHIST_ICHK_IERR(phist_map_get_ilower(map,&ilower,&ierr),ierr);
  PHIST_ICHK_IERR(phist_map_get_iupper(map,&iupper,&ierr),ierr);
  //std::srand(ilower);
  //PHIST_ICHK_IERR(SUBR(mvec_put_value)(v0,st::zero(),&ierr),ierr);
  _ST_* v0_raw;
  lidx_t v0_lda;
  PHIST_ICHK_IERR(SUBR(mvec_extract_view)(v0,&v0_raw,&v0_lda,&ierr),ierr);
  for(int i = ilower; i <= iupper; i++)
  {
    _ST_ factor = (i % 2 == 0 ? st::one() : st::zero());
    v0_raw[i-ilower] = factor;
  }
*/


  // used to calculate explicit residuals
  mvec_ptr_t res;
  PHIST_ICHK_IERR(SUBR(mvec_create)(&res,map,nEig+blockDim-1,&ierr),ierr);


  //------------------------------- run block JaDa algorithm ----------------------- 
  PHIST_ICHK_IERR(SUBR(subspacejada)(opA, NULL, v0, which, tol, nEig, &nIter, blockDim, minBase, maxBase,
        innerBlockDim, innerMaxBase, initialShiftIters, initialShift, innerIMGS, innerGMRESabortAfterFirstConverged, symmetric,
        Q, R, resNorm, &ierr), ierr);
  int nConvergedEig = 0;
  for(int i = 0; i < nEig; i++)
    if(resNorm[i] <= tol)
      nConvergedEig++;
  PHIST_SOUT(PHIST_INFO, "subspacejada terminated after %d iterations and calculated %d eigenvalues;\n printing R:\n", nIter, nConvergedEig);
#ifdef PHIST_HAVE_MPI
  int me;
  PHIST_ICHK_IERR(ierr = MPI_Comm_rank(MPI_COMM_WORLD,&me), ierr);
  if( me == 0 )
  {
    PHIST_ICHK_IERR(SUBR( sdMat_print ) (R, &ierr), ierr);
  }
#else
  PHIST_ICHK_IERR(SUBR( sdMat_print ) (R, &ierr), ierr);
#endif
  PHIST_SOUT(PHIST_INFO, " residuum norm:");
  for(int i = 0; i < nEig; i++)
    PHIST_SOUT(PHIST_INFO, "\t%8.4e", resNorm[i]);

  // calculate real residual
  PHIST_ICHK_IERR(SUBR(sparseMat_times_mvec)(st::one(),A,Q,st::zero(),res,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(mvec_times_sdMat)(-st::one(),Q,R,st::one(),res,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(mvec_norm2)(res,resNorm,&ierr),ierr);
  PHIST_SOUT(PHIST_INFO, "\n explicit residuum norm:");
  for(int i = 0; i < nEig; i++)
    PHIST_SOUT(PHIST_INFO, "\t%8.4e", resNorm[i]);
  PHIST_SOUT(PHIST_INFO, "\n");




  //------------------------------- clear matrices and vectors --------------------- 
  // delete vectors and sdMats
  PHIST_ICHK_IERR(SUBR(mvec_delete)(res,&ierr),ierr);
  delete[] resNorm;
  PHIST_ICHK_IERR(SUBR(mvec_delete)(v0,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(sdMat_delete)(R,&ierr),ierr);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(Q,&ierr),ierr);
  // clean up operator
  delete opA;
  // delete matrix
  PHIST_ICHK_IERR(SUBR(sparseMat_delete)(A,&ierr),ierr);
  PHIST_ICHK_IERR(phist_comm_delete(comm,&ierr),ierr);

  PHIST_MAIN_TASK_END

  PHIST_ICHK_IERR(phist_kernels_finalize(&ierr),ierr);
  return ierr;
}
