#include "phist_config.h"

#include "phist_tools.h"
#include "phist_kernels.h"
#include "phist_core.h"
#include "phist_MemOwner.hpp"
#include "phist_get_arg.hpp"

#include "phist_jadaOpts.h"
#include "phist_subspacejada.h"
#include "phist_harmonicjada.h"
#include "phist_precon.h"
// needed for ComputeEigenvectors
#include "phist_schur_decomp.h"

#include ${PHIST_TG_HFILE}
#include "phist_driver_utils.h"


#include "phist_ScalarTraits.hpp"
#include "phist_MemOwner.hpp"
#include "phist_std_typedefs.hpp"

void SUBR(print_usage)(const char* progname)
{
    int iflag;
    PHIST_SOUT(PHIST_ERROR,"Usage: %s <matrix A> <matrix B> <jadaOpts file>\n",progname);
    
    PHIST_SOUT(PHIST_ERROR,"Alternative Usage: %s <matrix A> [<matrix B>] [<hermitian>] [<invariant subspace dim>] [<which>] [<tol>] [<max iters> "
    "<JD block size> <min basis> <max basis> <inner block size> <inner iters> <initial shift> <initial shift iters> "
    "<inner solver robust> <inner solver abort when first converged>]\n"
    "\n"
    "Where <matrix A> is a string defining the matrix A (see explanation below)                                 \n"
    "      <matrix B> defines the Hermitian and positive definite B matrix, which may be \"I\" or \"none\"      \n"
    "                 to solve a standard eigenvalue problem.                                                   \n"
    "      <hermitian> is 0 (general A) or 1 (symmetric/Hermitian A)                                    \n"
    "      <invariant subspace dim> is the number of eigenpairs sought                                  \n"
    "      <which> may be SM, LM, SR, LR (S/L for smallest/largest, M/R for magnitude/real part)        \n"
    "              or of the form \"TARGET\" <value>. SM is equivalent to TARGET 0, in this the driver  \n"
    "              assumes the target lies in the interior of the spectrum and calls the variant with   \n"
    "              harmonic Ritz extraction                                                             \n"
    "      <tol>   convergence tolerance, tol>eps_mach=%e                                               \n"
    "      <max iters>                                                                                  \n"
    "      <JD block size> block size, recommended values are 1 (few eigenvalues), 2 or 4               \n"
    "      <min basis>     JD will restart from this number of vectors, <min basis >= nEig+block_size   \n"
    "      <max basis>     maximum number of basis vectors allowed (including locked eigenvecotors)     \n"
    "      <inner block size> block size for inner linear solver, typically=JD block size               \n"
    "      <inner iters>   max number of linear iterations per outer step, default: 25                  \n"
    "      <initial shift> fix shift for                                                                \n"
    "      <initial shift iters> iterations rather than running an Arnoldi process.                     \n"
    "      <inner solver robust> 0 or 1, 1 is recommended for 'hard' problems, e.g. nonsymmetric ones   \n"
    "      <inner solver abort when first converged> 0/1, 1 is typically a good choice                  \n",
    progname, mt::eps() );
    // print usage message for creating/reading a matrix
    SUBR(create_matrix)(NULL, NULL, "usage",&iflag);
}

int main(int argc, char** argv)
{
  int iflag;
  PHIST_ICHK_IERR(phist_kernels_init(&argc,&argv,&iflag),iflag);

  PHIST_MAIN_TASK_BEGIN

  //------------------------------- parse input parameters ------------------------- 

  // check arguments
  if( argc < 2 )
  {
    SUBR(print_usage)(argv[0]);
    return 1;
  }
  const char* problem=argv[1];
  const char* problemB=argc>2? argv[2]: NULL;

  // fill the jadaOpts struct to pass settings to the solver
  phist_jadaOpts opts;

if (argc==4 && argv[3][0]!='0'&&argv[3][0]!='1')
{
  const char* parameter_file=argv[3];
  PHIST_SOUT(PHIST_VERBOSE,"get options from file '%s'\n",parameter_file);
  PHIST_ICHK_IERR(phist_jadaOpts_fromFile(&opts,parameter_file,&iflag),iflag);
}
else
{

  PHIST_SOUT(PHIST_VERBOSE,"get options from command line (if any)'\n");
  phist_jadaOpts_setDefaults(&opts);
  // parse command line
  int p=3;
  
  // symmetry of A
  bool symmetric=false;
  GET_ARG(symmetric,p++,true);
  opts.symmetry=symmetric?phist_HERMITIAN:phist_GENERAL;
              
  // number of eigenvalues to compute
  GET_ARG(opts.numEigs,p++,opts.numEigs>0);

  // which eigenvalues to compute
  GET_ARG(opts.which,p++,opts.which!=phist_INVALID_EIGSORT&&opts.which!=phist_NO_EIGSORT);

  _ST_ target=st::zero();
  if (opts.which==phist_TARGET)
  {
    opts.which=phist_SM; // use target=0 and harmonic Ritz extraction
    GET_ARG(target,p++,true);
    if (target!=st::zero())
    {
      PHIST_SOUT(PHIST_ERROR,"you requested eigenvalues near a target %8.4e%+8.4ei\n"
                             "while this is easy to implement, we haven't done so yet.\n"
                             "Only the target 0 is allowed for the moment.\n",
                             st::real(target), st::imag(target));
      return PHIST_NOT_IMPLEMENTED;
    }
  }

  // desired accuracy: residuum tolerance
  GET_ARG(opts.convTol,p++,opts.convTol>mt::eps());

  // maximum number of iterations
  GET_ARG(opts.maxIters,p++,opts.maxIters>0);

  // block size
  GET_ARG(opts.blockSize,p++,opts.blockSize>0);

  // min basis size
  GET_ARG(opts.minBas,p++,opts.minBas>=opts.numEigs+opts.blockSize-1);

  // max basis size
  GET_ARG(opts.maxBas,p++,opts.maxBas>opts.minBas+opts.blockSize&&((opts.maxBas-opts.minBas)%opts.blockSize==0));

  /// we don't allow setting this via the command line, but if you use a parameter file it's no problem
  opts.innerSolvType=symmetric?phist_MINRES:phist_GMRES;
  
  // inner linear solver block size
  GET_ARG(opts.innerSolvBlockSize,p++,opts.innerSolvBlockSize>0&&opts.innerSolvBlockSize<=opts.blockSize);

  // inner GMRES subspace dimension
  GET_ARG(opts.innerSolvMaxBas,p++,opts.innerSolvMaxBas>0);
  opts.innerSolvMaxIters=opts.innerSolvMaxBas;

  // initial shift
  _CT_ initialShift = ct::zero();
  GET_ARG(initialShift,p++,true);
  opts.initialShift_r=ct::real(initialShift);
  opts.initialShift_i=ct::imag(initialShift);

  // number of initial iterations with fixed initial shift
  GET_ARG(opts.initialShiftIters,p++,opts.initialShiftIters>=0);

  // in the inner GMRES: use a iterated modified gram schmidt (more accurate, but quite costly!)
  GET_ARG(opts.innerSolvRobust,p++,true);

  // in the inner GMRES: abort solving a block when first system converged (effectively disables pipelining, but only "blocking" may be faster for now)
  GET_ARG(opts.innerSolvStopAfterFirstConverged,p++,true);

}

  int blockDim=opts.blockSize;
  int nEig=opts.numEigs;

  comm_ptr comm = NULL;
  // wrap MPI_COMM_WORLD
  PHIST_ICHK_IERR(phist_comm_create(&comm,&iflag),iflag);

  //------------------------------- setup matrices and vectors --------------------- 

  // we have gathered all input parameters...
  // read or create matrix A using our helper function from driver_utils,
  // which can handle matrix files like name.mm, name.bin etc. but also our
  // favorite test cases spinSZ<N>, graphene<N> etc.
  sparseMat_ptr A = NULL;
  iflag=PHIST_SPARSEMAT_PERM_GLOBAL|PHIST_SPARSEMAT_PERM_LOCAL;
  if( opts.innerSolvBlockSize == 1 )
  {
    iflag = iflag | PHIST_SPARSEMAT_OPT_SINGLESPMVM;
  }
  else
  {
    iflag = iflag | PHIST_SPARSEMAT_OPT_BLOCKSPMVM;
  }
  PHIST_ICHK_IERR(SUBR(create_matrix)(&A,comm,problem,&iflag), iflag);
  
  // create an operator from A
  linearOp_ptr opA = new TYPE(linearOp);

  // we need the domain map of the matrix
  const_map_ptr map = NULL;
  PHIST_ICHK_IERR(SUBR(sparseMat_get_domain_map)(A,&map,&iflag),iflag);

  // create/read B matrix if needed. If B is the identity matrix, do not create an operator.
  // This would lead to quite some memory overhead since B*Q is stored in the implementation
  // of subspacejada.
  linearOp_ptr opB = NULL;
  sparseMat_ptr B=NULL;
  
  if (strcmp(problemB, "I") && strcasecmp(problemB, "none"))
  {
    phist_const_context_ptr ctx = NULL;
    PHIST_ICHK_IERR(SUBR(sparseMat_get_context)(A,&ctx,&iflag),iflag);
    iflag=0;
    PHIST_SOUT(PHIST_VERBOSE,"generalized eigenproblem...\n");
    PHIST_ICHK_IERR(SUBR(create_matrix_with_context)(&B,ctx,problemB,&iflag), iflag);
    opB=new TYPE(linearOp);
    PHIST_ICHK_IERR(SUBR(linearOp_wrap_sparseMat)(opB,B,&iflag),iflag);
    PHIST_ICHK_IERR(SUBR(linearOp_wrap_sparseMat_pair)(opA,A,B,&iflag),iflag);
  }
  else
  {
    PHIST_SOUT(PHIST_VERBOSE,"standard eigenproblem...\n");
    PHIST_ICHK_IERR(SUBR(linearOp_wrap_sparseMat)(opA,A,&iflag),iflag);
  }

  // setup necessary vectors and matrices for the schur form
  mvec_ptr Q = NULL;
  PHIST_ICHK_IERR(SUBR(mvec_create)(&Q,map,nEig+opts.blockSize-1,&iflag),iflag);
  MvecOwner<_ST_> _Q(Q);
  sdMat_ptr R = NULL;
  PHIST_ICHK_IERR(SUBR(sdMat_create)(&R,nEig+blockDim-1,nEig+blockDim-1,comm,&iflag),iflag);
  SdMatOwner<_ST_> _R(R);
  _MT_ *resNorm = new _MT_[nEig+blockDim-1];
  _MT_ *resNormExp = new _MT_[nEig+blockDim-1];
  CT *ev = new CT[nEig+blockDim-1];

  // setup start vector (currently to (1 0 1 0 .. ) )
  mvec_ptr v0 = NULL;
  PHIST_ICHK_IERR(SUBR(mvec_create)(&v0,map,1,&iflag),iflag);
  MvecOwner<_ST_> _v0(v0);
  
//  PHIST_ICHK_IERR(SUBR(mvec_random)(v0,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_put_value)(v0,st::one(),&iflag),iflag);
  // initialize random number generator in parallel
/*
  int ilower, iupper;
  PHIST_ICHK_IERR(phist_map_get_ilower(map,&ilower,&iflag),iflag);
  PHIST_ICHK_IERR(phist_map_get_iupper(map,&iupper,&iflag),iflag);
  //std::srand(ilower);
  //PHIST_ICHK_IERR(SUBR(mvec_put_value)(v0,st::zero(),&iflag),iflag);
  _ST_* v0_raw;
  phist_lidx v0_lda;
  PHIST_ICHK_IERR(SUBR(mvec_extract_view)(v0,&v0_raw,&v0_lda,&iflag),iflag);
  for(int i = ilower; i <= iupper; i++)
  {
    _ST_ factor = (i % 2 == 0 ? st::one() : st::zero());
    v0_raw[i-ilower] = factor;
  }
*/


  // used to calculate explicit residuals
  mvec_ptr res;
  PHIST_ICHK_IERR(SUBR(mvec_create)(&res,map,nEig+blockDim-1,&iflag),iflag);
  MvecOwner<_ST_> _res(res);

  opts.v0=v0;
  
  TYPE(linearOp_ptr) precon=NULL;
  
  // create a preconditioner if the user asked for it
  if (opts.preconType!=phist_NO_PRECON)
  {
    precon = new TYPE(linearOp);
    PHIST_ICHK_IERR(SUBR(precon_create)(precon,A,st::zero(),NULL,NULL,NULL,
                        precon2str(opts.preconType), opts.preconOpts, NULL, &iflag),iflag);
    opts.preconOp=precon;
  }
  
  int nIter=opts.maxIters;

  //------------------------------- run block JaDa algorithm ----------------------- 
  if (opts.how==phist_HARMONIC)
  {
    PHIST_SOUT(PHIST_INFO,"Jacobi-Davidson for interior eigenvalues\n");
    PHIST_ICHK_NEG_IERR(SUBR(harmonicjada)(opA, opB, opts,
          Q, R, ev, resNorm, &nEig, &nIter, &iflag), iflag);
  }
  else
  {
    PHIST_SOUT(PHIST_INFO,"Jacobi-Davidson for exterior eigenvalues\n");
    PHIST_ICHK_NEG_IERR(SUBR(subspacejada)(opA, opB, opts,
          Q, R, ev, resNorm, &nEig, &nIter, &iflag), iflag);
  }

  int nvQ;
  PHIST_ICHK_IERR(SUBR(mvec_num_vectors)(Q,&nvQ,&iflag),iflag);

  // calculate real residual, res = AQ - BQR
  mvec_ptr BQ = Q;
  if (B!=NULL)
  {
    PHIST_ICHK_IERR(SUBR(mvec_create)(&BQ,map,nvQ,&iflag),iflag);
    PHIST_ICHK_IERR(SUBR(sparseMat_times_mvec)(st::one(),B,Q,st::zero(),BQ,&iflag),iflag);
  }
  MvecOwner<_ST_> _BQ(BQ!=Q?BQ:NULL);  
  PHIST_ICHK_IERR(SUBR(sparseMat_times_mvec)(st::one(),A,Q,st::zero(),res,&iflag),iflag);
    PHIST_ICHK_IERR(SUBR(mvec_times_sdMat)(-st::one(),BQ,R,st::one(),res,&iflag),iflag);

  TYPE(sdMat_ptr) QtQ=NULL;
  PHIST_ICHK_IERR(SUBR(sdMat_create)(&QtQ,nvQ,nvQ,comm,&iflag),iflag);
  SdMatOwner<_ST_> _QtQ(QtQ);
  PHIST_ICHK_IERR(SUBR(sdMat_identity)(QtQ,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvecT_times_mvec)(st::one(),Q,BQ,-st::one(),QtQ,&iflag),iflag);
  _MT_ ortho_err=mt::zero();
  //_MT_ normQtQ[nvQ];
  //PHIST_ICHK_IERR(SUBR(sdMat_normF)(QtQ,normQtQ,&iflag),iflag);
  //for (int i=0; i<nvQ; i++) ortho_err=std::max(ortho_err,normQtQ[i]);
  _ST_* val=NULL;
  phist_lidx lda;
  PHIST_ICHK_IERR(SUBR(sdMat_extract_view)(QtQ,&val,&lda,&iflag),iflag);
  for (int i=0; i<nvQ; i++)
    for (int j=0; j<nvQ; j++)
    {
      ortho_err=std::max(ortho_err,std::abs(val[i*lda+j]));
    }

  PHIST_ICHK_IERR(SUBR(mvec_norm2)(res,resNormExp,&iflag),iflag);
  int nConvergedEig = 0;
  for(int i = 0; i < nEig; i++)
    if(resNorm[i] <= opts.convTol)
      nConvergedEig++;

  PHIST_SOUT(PHIST_INFO, "subspacejada terminated after %d iterations and calculated %d eigenvalues (%s).", 
        nIter, nConvergedEig, (nIter<=opts.maxIters && nConvergedEig>=opts.numEigs)?"SUCCESS":"FAILURE");
  PHIST_SOUT(PHIST_INFO, "\n deviation from (B-)orthogonality in Q: %8.4e\t(%s)\n",ortho_err,ortho_err<100*mt::eps()?"SUCCESS":"FAILURE");
  PHIST_SOUT(PHIST_INFO, "\n eigenvalues:              ");

  if( opts.symmetry==phist_HERMITIAN )
  {
    for(int i = 0; i < nEig; i++)
      PHIST_SOUT(PHIST_INFO, "\t%25.16e\n", ct::real(ev[i]));
    PHIST_SOUT(PHIST_INFO, "\n (est.) ritz residual norm:");
    for(int i = 0; i < nEig; i++)
      PHIST_SOUT(PHIST_INFO, "\t%8.4e", resNorm[i]);
    PHIST_SOUT(PHIST_INFO, "\n explicit residual norm:   ");
    for(int i = 0; i < nEig; i++)
      PHIST_SOUT(PHIST_INFO, "\t%8.4e", resNormExp[i]);
  }
  else
  {
    for(int i = 0; i < nEig; i++)
      PHIST_SOUT(PHIST_INFO, "\t%25.16e%+25.16ei\n", ct::real(ev[i]), ct::imag(ev[i]));
    PHIST_SOUT(PHIST_INFO, "\n (est.) ritz residual norm:");
    for(int i = 0; i < nEig; i++)
      PHIST_SOUT(PHIST_INFO, "\t%8.4e                  ", resNorm[i]);
    PHIST_SOUT(PHIST_INFO, "\n explicit residual norm:   ");
    for(int i = 0; i < nEig; i++)
      PHIST_SOUT(PHIST_INFO, "\t%8.4e                  ", resNormExp[i]);
  }
  PHIST_SOUT(PHIST_INFO, "\n");

  // compute eigenvectors X: A*X=X*D and diagonal matrix D with eigenvalues 
  // (for checking the sorting only).
  sdMat_ptr D=NULL;
  mvec_ptr X=NULL, AX=NULL;
  PHIST_ICHK_IERR(SUBR(mvec_create)(&X,map,nEig,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&AX,map,nEig,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(sdMat_create)(&D,nEig,nEig,comm,&iflag),iflag);
  
  MvecOwner<_ST_> _X(X),_AX(AX);
  SdMatOwner<_ST_> _D(D);
  
  PHIST_ICHK_IERR(SUBR(ComputeEigenvectors)(Q,R,X,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(sparseMat_times_mvec)(st::one(),A,X,st::zero(),AX,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(sdMat_put_value)(D,st::zero(),&iflag),iflag);
  _ST_* D_raw=NULL;
  phist_lidx ldD;
  PHIST_ICHK_IERR(SUBR(sdMat_extract_view)(D,&D_raw,&ldD,&iflag),iflag);
  for (int i=0; i<nEig; i++)
  {
#ifdef IS_COMPLEX
    D_raw[i*ldD+i] = ev[i];
#else
    _MT_ evr=ct::real(ev[i]), evi=ct::imag(ev[i]);
    D_raw[i*ldD+i] = evr;
    if (mt::abs(evi)>opts.convTol)
    {
      if (evi>mt::zero() && i<nEig-1)
      {
        D_raw[(i+1)*ldD+i] = evi;
      }
      else if (evi<mt::zero() && i>0)
      {
        D_raw[(i-1)*ldD+i] = evi;
      }
    }
#endif
  }
  PHIST_ICHK_IERR(SUBR(sdMat_to_device)(D,&iflag),iflag);
  
  PHIST_ICHK_IERR(SUBR(mvec_times_sdMat)(-st::one(),X,D,st::one(),AX,&iflag),iflag);
  _MT_ eVecResNorm[nEig];
  PHIST_ICHK_IERR(SUBR(mvec_norm2)(AX,eVecResNorm,&iflag),iflag);
  _MT_ max_evres = mt::zero();
  for (int i=0; i<nEig; i++) max_evres=std::max(max_evres,eVecResNorm[i]);
  PHIST_SOUT(PHIST_INFO,"max eigenvector residual: %8.4e\t(%s)\n",max_evres,(max_evres<100*opts.convTol)?"SUCCESS":"FAILURE");

  // clean up
  delete[] ev;
  delete[] resNorm;
  delete[] resNormExp;
  PHIST_ICHK_IERR(opA->destroy(opA,&iflag),iflag);
  delete opA;
  if (opB)
  {
    PHIST_ICHK_IERR(opB->destroy(opB,&iflag),iflag);
    delete opB;
  }
  // delete preconditioner (if any)
  if (precon!=NULL)
  {
    PHIST_ICHK_IERR(SUBR(precon_delete)(precon,&iflag),iflag);
    delete precon;
    opts.preconOp=NULL;
  }
  // delete matrices 
  PHIST_ICHK_IERR(SUBR(sparseMat_delete)(A,&iflag),iflag);
  if (B)
  {
    PHIST_ICHK_IERR(SUBR(sparseMat_delete)(B,&iflag),iflag);
  }
  PHIST_ICHK_IERR(phist_comm_delete(comm,&iflag),iflag);

  PHIST_MAIN_TASK_END

  PHIST_ICHK_IERR(phist_kernels_finalize(&iflag),iflag);
  return iflag;
}
