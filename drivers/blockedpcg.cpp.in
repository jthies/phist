/*******************************************************************************************/
/* This file is part of the PHIST software available at https://bitbucket.org/essex/phist/ */
/* You may redistribute it and/or modify it under the terms of the BSD-style licence       */
/* included in this software.                                                              */
/*                                                                                         */
/* Contact: Jonas Thies (Jonas.Thies@DLR.de)                                               */
/*                                                                                         */
/*******************************************************************************************/
#include "phist_config.h"

#ifdef PHIST_HAVE_MPI
#include <mpi.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <strings.h>

#include "phist_get_arg.hpp"

#include "phist_macros.h"
#include "phist_kernels.h"
#include "phist_operator.h"
#include "phist_precon.h"
#include "phist_belos.h"

#include "phist_blockedpcg.h"
#include "phist_precon.h"

#include ${PHIST_TG_HFILE}

#include "phist_driver_utils.h"
#include "phist_ScalarTraits.hpp"
#include "phist_std_typedefs.hpp"

int main(int argc, char** argv)
{
  int rank, num_proc;
  int i, iflag;

  phist_comm_ptr comm;
  sparseMat_ptr A;
  linearOp_ptr A_op; // this is a wrapper for the CRS matrix which we pass to the actual solver
  linearOp_ptr P_op=NULL; // preconditioner. NULL means identity/no preconditioning
  
  phist_const_map_ptr map; // map (element distribution) of vectors according to 
                       // the distribution of matrix rows
  mvec_ptr X,XEX,B,R;// multivectors for solution and rhs (XEX exact solution to compare)
  
  MT *rnorm2; /* for computing the residual norm explicitly */
  MT *norm2; /* for computing the error norms after the solve */
  MT *xnorm2, *bnorm2; /* for scaling, norm of exact solution and rhs */
  char* matname;
  
  int num_iters, nconv;

  PHIST_ICHK_IERR(phist_kernels_init(&argc,&argv,&iflag),iflag);

  PHIST_ICHK_IERR(phist_comm_create(&comm,&iflag),iflag);

  PHIST_ICHK_IERR(phist_comm_get_rank(comm, &rank,&iflag),iflag);
  PHIST_ICHK_IERR(phist_comm_get_size(comm, &num_proc,&iflag),iflag);

  if (argc<3)
  {
    PHIST_SOUT(PHIST_INFO,"Usage: %s <matrix> <numSys> [<maxIter> [<tol> [<precon> [precon_opts]]]]\n", argv[0]);
    SUBR(create_matrix)(NULL, NULL, "usage",&iflag);
	SUBR(precon_create)(NULL,NULL,st::zero(),NULL,NULL,NULL,"usage",NULL,NULL,&iflag);
    return 1;
  }

  matname = argv[1];
  int num_rhs = atoi(argv[2]);
  
  int p = 3;
  
  int maxIter = 1000;
  GET_ARG(maxIter,p++,maxIter>0);
  MT tol = mt::sqrt(mt::eps());
  GET_ARG(tol,p++,tol>0&&tol<1);
  const char* prec_type="None";
  GET_ARG(prec_type,p++,str2precon(prec_type)!=phist_INVALID_PRECON);
  const char* prec_opts="";
  GET_ARG(prec_opts,p++,true);	

  PHIST_OUT(PHIST_INFO,"matrix: %s\n",matname);
  PHIST_OUT(PHIST_INFO,"number of rhs: %d\n",num_rhs);
  PHIST_OUT(PHIST_INFO,"preconditioner: %s\n",prec_type);
  PHIST_OUT(PHIST_INFO,"prec options: %s\n",prec_opts); 
	
  // create matrix and vectors
  //iflag=PHIST_SPARSEMAT_PERM_GLOBAL;
  PHIST_ICHK_IERR(SUBR(create_matrix)(&A,comm,matname,&iflag),iflag);
  
  /* we assume domain map = range map here, which is reasonable for something
     you want to put into a linear solver */
  PHIST_ICHK_IERR(SUBR(sparseMat_get_domain_map)(A, &map,&iflag),iflag);
  
  PHIST_ICHK_IERR(SUBR(mvec_create)(&XEX,map,num_rhs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&X,map,num_rhs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&B,map,num_rhs,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&R,map,num_rhs,&iflag),iflag);

  /* randomize the solution vector */
  PHIST_ICHK_IERR(SUBR(mvec_put_value)(X,st::zero(),&iflag),iflag);
  //PHIST_ICHK_IERR(SUBR(mvec_random)(XEX,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_put_value)(XEX,st::one(),&iflag),iflag);
  
  /* compute rhs B=A*XEX */
  PHIST_ICHK_IERR(SUBR(sparseMat_times_mvec)(st::one(),A,XEX,st::zero(),B,&iflag),iflag);
  
  /* create operator wrapper for computing Y=A*X using a CRS matrix */
  A_op = (linearOp_ptr)malloc(sizeof(TYPE(linearOp)));
  PHIST_ICHK_IERR(SUBR(linearOp_wrap_sparseMat)(A_op,A,&iflag),iflag);
  
  /* create the preconditioner */
  if (strcasecmp(prec_type,"None")!=0)
  {
    P_op = (linearOp_ptr)malloc(sizeof(TYPE(linearOp)));
    PHIST_SOUT(PHIST_VERBOSE,"compute preconditioner '%s'\n",prec_type);
    PHIST_ENTER_FCN("main: preconditioner setup");
    PHIST_ICHK_IERR(SUBR(precon_create)(P_op,A,st::zero(),NULL,NULL,NULL,prec_type,prec_opts,NULL,&iflag),iflag);
  }
  if (strcasecmp(prec_type,"None")==0)
  {
    P_op = (linearOp_ptr)malloc(sizeof(TYPE(linearOp)));
    PHIST_SOUT(PHIST_VERBOSE,"preconditioner is '%s' (identity)\n",prec_type);
    PHIST_ENTER_FCN("main: preconditioner setup");
    PHIST_ICHK_IERR(SUBR(linearOp_identity)(P_op,map,map,&iflag),iflag);
  } 

  int nIter=maxIter;
  _MT_ _tol[num_rhs];
  for(int i=0; i<num_rhs; i++) _tol[i]=tol;
  PHIST_ICHK_IERR(SUBR(blockedPCG_iterate)(A_op,P_op,B,X,num_rhs,&nIter,_tol,&iflag),iflag);

  /* compute residual norms */
  PHIST_ICHK_IERR(SUBR(sparseMat_times_mvec)(st::one(),A,X,st::zero(),R,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_add_mvec)(-st::one(),B,st::one(),R,&iflag),iflag);
  
  /* compute ||X - XEX||_2 */
  norm2=new MT[num_rhs];
  rnorm2=new MT[num_rhs];
  xnorm2=new MT[num_rhs];
  bnorm2=new MT[num_rhs];;
  PHIST_ICHK_IERR(SUBR(mvec_add_mvec)(st::one(),XEX,-st::one(),X,&iflag),iflag);

  PHIST_ICHK_IERR(SUBR(mvec_norm2)(R,rnorm2,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_norm2)(X,norm2,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_norm2)(XEX,xnorm2,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_norm2)(B,bnorm2,&iflag),iflag);
  
  PHIST_SOUT(PHIST_INFO,"Total number of iterations:%d (%s)\n",nIter,nIter<maxIter?"SUCCESS":"FAILURE");

 
  PHIST_SOUT(PHIST_VERBOSE,"residual 2-norms: ||r||, ||r||/||x||, ||r||/||b||:\n");
  for (i=0;i<num_rhs;i++)
  {
    PHIST_SOUT(PHIST_VERBOSE,"%8.4e\t%8.4e\t%8.4e (%s)\n",rnorm2[i],rnorm2[i]/xnorm2[i],rnorm2[i]/bnorm2[i], 
    rnorm2[i]/bnorm2[i]<tol?"SUCCESS":"FAILURE");
  }
  PHIST_SOUT(PHIST_VERBOSE,"\n");

  PHIST_SOUT(PHIST_VERBOSE,"error 2-norms: ||e||, ||e||/||x||, ||e||/||b||:\n");
  for (i=0;i<num_rhs;i++)
  {
    PHIST_SOUT(PHIST_VERBOSE,"%8.4e\t%8.4e\t%8.4e\n",norm2[i],norm2[i]/xnorm2[i],norm2[i]/bnorm2[i]);
  }
  PHIST_SOUT(PHIST_VERBOSE,"\n");

  
  delete [] rnorm2;
  delete [] norm2;
  delete [] xnorm2;
  delete [] bnorm2;


  // since we don't have smart pointers in PHIST, we have to be a bit
  // careful about the order in which we delete stuff. For instance, the
  // preconditioner may have a pointer to A, so we delete it first.
  if (P_op!=NULL)
  {
    if (strcasecmp(prec_type,"None")!=0) 
	{
      PHIST_ICHK_IERR(SUBR(precon_delete)(P_op,&iflag),iflag);
      free(P_op);
    }
    if (strcasecmp(prec_type,"None")==0)
    {
      PHIST_ICHK_IERR(SUBR(linearOp_destroy)(P_op,&iflag),iflag);
      free(P_op);
	}
  }

  PHIST_ICHK_IERR(SUBR(sparseMat_delete)(A,&iflag),iflag);

  PHIST_ICHK_IERR(SUBR(mvec_delete)(X,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(XEX,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(B,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(R,&iflag),iflag);
  free(A_op);
  PHIST_ICHK_IERR(phist_kernels_finalize(&iflag),iflag);
  return iflag;
}
