/*******************************************************************************************/
/* This file is part of the PHIST software available at https://bitbucket.org/essex/phist/ */
/* You may redistribute it and/or modify it under the terms of the BSD-style licence       */
/* included in this software.                                                              */
/*                                                                                         */
/* Contact: Jonas Thies (Jonas.Thies@DLR.de)                                               */
/*                                                                                         */
/*******************************************************************************************/
#include "phist_config.h"

#ifdef PHIST_HAVE_MPI
#include <mpi.h>
#endif

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

#include "phist_macros.h"
#include "phist_enums.h"
#include "phist_kernels.h"
#include "phist_operator.h"

#ifdef PHIST_CP
#include "phist_simple_lanczos_ft.h"
#include "cp_options.h"
#else 
#include "phist_simple_lanczos.h"
#endif

#include ${PHIST_TG_HFILE}
#include "phist_driver_utils.h"
#include "phist_ScalarTraits.hpp"
#include "phist_std_typedefs.hpp"

// Computes the largest and smallest eigenvalue of a Hermitian matrix using the Lanczos
// method. This driver is intended for testing fault tolarance concepts in PHIST.
#ifdef PHIST_CP
int read_params(int argc, char* argv[] , Cp_Options * myCpOpt){
	static char *prgname = "";
  prgname = argv[0];
	char * tmp = new char[256];
	std::string cpPathTemp ;
	for (int i = 1; i < argc; ++i) {
		if ((!strcmp(argv[i], "-cppath"))) {
			sprintf(tmp, "%s" ,argv[++i]);
			myCpOpt->setCpPath(tmp);
			cpPathTemp = myCpOpt->getCpPath();
			std::cout << "cpPath: " << cpPathTemp << std::endl;
		}
		if ((!strcmp(argv[i], "-restart"))) {
			bool restart = true;
			myCpOpt->setRestartStatus( restart );
			std::cout << "Restart " << restart << std::endl;
		}
		if ((!strcmp(argv[i], "-niter"))) {
			sprintf(tmp, "%s" ,argv[++i]);
			myCpOpt->setnIter( atoi(tmp) );
			std::cout << "nIter " << myCpOpt->getnIter() << std::endl;
		}
		if ((!strcmp(argv[i], "-cpfreq"))) {
			sprintf(tmp, "%s" ,argv[++i]);
			myCpOpt->setCpFreq( atoi(tmp) );
			std::cout << "cpfreq " << myCpOpt->getCpFreq() << std::endl;
		}
	}
}
#endif

int main(int argc, char** argv)
{
  int iflag=0;
  PHIST_ICHK_IERR(phist_kernels_init(&argc,&argv,&iflag),iflag);
  // this macro will take care of fault tolerance
  PHIST_MAIN_TASK_BEGIN
  comm_ptr comm;
  sparseMat_ptr A;
  
  MT lambda_min,lambda_max;
  
  char* matname;
  
  int num_iters;
  
  PHIST_ICHK_IERR(phist_comm_create(&comm,&iflag),iflag);
  if (argc<2)
  {
    PHIST_SOUT(PHIST_ERROR,"Usage: %s <matrix>\n",argv[0]);
    
        SUBR(create_matrix)(NULL,NULL,"usage",&iflag);

    return 1;
  }

  matname = argv[1];
 
  iflag = PHIST_SPARSEMAT_PERM_GLOBAL;
  PHIST_ICHK_IERR(SUBR(create_matrix)(&A,comm,matname,&iflag),iflag);
  
  // create operator wrapper for computing Y=A*X using a CRS matrix
  TYPE(linearOp) A_op;
  PHIST_ICHK_IERR(SUBR(linearOp_wrap_sparseMat)(&A_op,A,&iflag),iflag);

#ifdef PHIST_CP
	Cp_Options * cpOpt=new Cp_Options[1]; 
	read_params(argc, argv ,cpOpt);
	
	printf("CPPATH : %s\n", cpOpt->getCpPath()); 
	if (argc<3)
  {
 		printf ( "Usage: %s <matrix> <CP-PATH> -restart(InCaseOfRestart)\n", argv[0]); 
    return 1;
  }

	cpOpt->setCpFreq(cpOpt->getCpFreq());
	cpOpt->setCpPath(cpOpt->getCpPath());
#endif
 
  // call Lanczos iteration routine
  num_iters=1000; 
#ifdef PHIST_CP
	printf("===== Simple_lanczos_ft =====\n"); 
  num_iters= cpOpt->getnIter();
	SUBR(simple_lanczos_ft)(&A_op,&lambda_min,&lambda_max,&num_iters,cpOpt, &iflag);
#else
	printf("===== Simple_lanczos =====\n"); 
	SUBR(simple_lanczos)(&A_op,&lambda_min,&lambda_max,&num_iters,&iflag);
#endif

  if (iflag!=0)
  {
    PHIST_SOUT(PHIST_WARNING,"code %d returned from jdqr\n",iflag);
  }

  PHIST_SOUT(PHIST_INFO,"simple_lanczos ran for %d iterations and found lambda_min=%8.4e, lambda_max=%8.4e\n",
  num_iters,lambda_min,lambda_max);
  
  PHIST_ICHK_IERR(SUBR(sparseMat_delete)(A,&iflag),iflag);

  PHIST_MAIN_TASK_END

  PHIST_ICHK_IERR(phist_kernels_finalize(&iflag),iflag);
  
	return iflag;
}
