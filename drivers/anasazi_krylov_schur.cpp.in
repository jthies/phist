/*******************************************************************************************/
/* This file is part of the PHIST software available at https://bitbucket.org/essex/phist/ */
/* You may redistribute it and/or modify it under the terms of the BSD-style licence       */
/* included in this software.                                                              */
/*                                                                                         */
/* Contact: Jonas Thies (Jonas.Thies@DLR.de)                                               */
/*                                                                                         */
/*******************************************************************************************/
#include "phist_config.h"

#ifdef PHIST_HAVE_MPI
#include <mpi.h>
#endif

#include <cstring>

#include "phist_macros.h"
#include "phist_get_arg.hpp"
#include "phist_kernels.h"
#include "phist_operator.h"
#include "phist_anasazi.h"
#include "phist_ScalarTraits.hpp"

// wrap iterative linear solver as operator
#include "phist_iter_op.h"

#include ${PHIST_TG_HFILE}
#include "phist_driver_utils_decl.h"

void SUBR(print_usage)(char* argv[],int pos)
{
    int iflag;
    if (pos>0)
    {
    PHIST_SOUT(PHIST_ERROR,"argument %d had an invalid value (%s)\n",pos,argv[pos]);
    }
    PHIST_SOUT(PHIST_ERROR,"Usage: %s <matrix A> <matrix B> <symmetric/hermitian> <how many> <which> <tol>\n"
                           "          <max iters> <block size> <num blocks>\n"
                           "(all but the first argument get default values if omitted)\n"
                           "Which may be of the form \"TARGET\" <real value>\n",
                           argv[0]);
    // print usage message for creating/reading a matrix
    SUBR(create_matrix)(nullptr, nullptr, "usage",&iflag);
}

int main(int argc, char** argv)
{
#include "phist_std_typedefs.hpp"
  int i, iflag = 0;

  comm_ptr comm;
  sparseMat_ptr A=nullptr, B=nullptr;
  linearOp_ptr A_op, B_op=nullptr; // this is a wrapper for the CRS matrix which we pass to the actual solver
  linearOp_ptr Ainv_op; // wrapper for an iterative linear solver for computing interior 
                    // eigenvalues (used if which=TARGET)
  
  const_map_ptr map; // map (element distribution) of vectors according to 
                       // the distribution of matrix rows
  mvec_ptr X,R;// multivectors for eigenvectors and residuals

  char *matname,*matBname;
    
  // default input parameters:
  MT tol=1.0e-6;
  phist_EeigSort which=phist_LM;
  ST target_value;
  
  int sym=0;
  int how_many=10;
  int max_iters=300;
  int block_size=1;
  int num_blocks=20;

  int variant=(int)BKS; // only block Krylov-Schur accessible via this driver right now.
  
  PHIST_ICHK_IERR(phist_kernels_init(&argc,&argv,&iflag),iflag);

PHIST_MAIN_TASK_BEGIN

  PHIST_ICHK_IERR(phist_comm_create(&comm,&iflag),iflag);

  if (argc<3)
  {
    SUBR(print_usage)(argv,0);
    return 1;
  }

  matname = argv[1];
  matBname = argv[2];
  
  int p=3;
  GET_ARG(sym,p++,sym==0||sym==1);
  GET_ARG(how_many,p++,how_many>0);
  GET_ARG(which,p++,true);
  if (which==phist_TARGET)
  {
    GET_ARG(target_value,p++,true);
  }
  GET_ARG(tol,p++,tol>mt::eps());
  GET_ARG(max_iters,p++,max_iters>0);
  GET_ARG(block_size,p++,block_size>0);
  GET_ARG(num_blocks,p++,num_blocks>0);
  
  if (num_blocks*block_size<how_many+10)
  {
    num_blocks=(how_many+10)/block_size;
  }

  iflag=0;//PHIST_SPARSEMAT_PERM_GLOBAL;
  PHIST_ICHK_IERR(SUBR(create_matrix)(&A,comm,matname,&iflag),iflag);

  if (matBname!=nullptr && strcmp(matBname,"I"))
  {
    iflag=0;
    PHIST_ICHK_IERR(SUBR(create_matrix)(&B,comm,matBname,&iflag),iflag);
  }
  
  /* we assume domain map = range map here, which is reasonable for something
     you want to put into a linear solver */
  PHIST_ICHK_IERR(SUBR(sparseMat_get_domain_map)(A, &map,&iflag),iflag);

  /* create vectors */
  PHIST_ICHK_IERR(SUBR(mvec_create)(&X,map,how_many,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_create)(&R,map,how_many,&iflag),iflag);
  
  /* create operator wrapper for computing Y=A*X using a CRS matrix */
  A_op = new TYPE(linearOp);
  Ainv_op = nullptr;
  PHIST_ICHK_IERR(SUBR(linearOp_wrap_sparseMat)(A_op,A,&iflag),iflag);
  if (B!=nullptr)
  {
    B_op = new TYPE(linearOp);
    PHIST_ICHK_IERR(SUBR(linearOp_wrap_sparseMat)(B_op,B,&iflag),iflag);
  }
 
  bool shift_invert=false; 
  if (which==phist_TARGET)
  {
    shift_invert=true;
    ST shift=-target_value;
    which=phist_LM;
    Ainv_op = new TYPE(linearOp);
    MT linTol=std::max(tol/10,2*mt::eps());
    int linIter=1000;
    phist_ElinSolv method=phist_CARP_CG;
    PHIST_ICHK_IERR(SUBR(linearOp_wrap_solver)(Ainv_op,A,shift,NULL,NULL,
        method,linTol,linIter,&iflag),iflag);
  }

  ST eigs[how_many];
  MT resid[how_many];
  int num_iters=max_iters;
  
  SUBR(anasazi)(A_op,Ainv_op,B_op,variant,nullptr,which,tol,&how_many,
        &num_iters,block_size,num_blocks,
        sym,X,eigs,&iflag);

  if (iflag!=0)
    {
    PHIST_SOUT(PHIST_WARNING,"code %d returned from Anasazi\n",iflag);
    if (iflag<0) return iflag;
    }
  PHIST_SOUT(PHIST_INFO,"number of iterations performed: %d\n",num_iters);
  PHIST_SOUT(PHIST_INFO,"number of eigenpairs computed: %d\n",how_many);
  /* compute residual norms */
  PHIST_ICHK_IERR(SUBR(sparseMat_times_mvec)(st::one(),A,X,st::zero(),R,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_vadd_mvec)(eigs,X,-st::one(),R,&iflag),iflag);
  
  PHIST_ICHK_IERR(SUBR(mvec_norm2)(R,resid,&iflag),iflag);
  
  if (shift_invert)
  {
    for (i=0;i<how_many;i++)
    {
      // NOTE: the feastCorrectionSolver that is used
      //       internally defines the operator to be
      //       inverted as sI-A, so the eigenvalues 
      //       returned have the wrong sign.
      eigs[i]=target_value - st::one()/eigs[i];
    }
  }

  if (how_many)
  {
    PHIST_SOUT(PHIST_VERBOSE,"Eigenvalue\tresidual\n");
  }
  for (i=0;i<how_many;i++)
  {
    PHIST_SOUT(PHIST_VERBOSE,"%8.4e\t%8.4e\n",st::real(eigs[i]),resid[i]);
  }
    
  PHIST_ICHK_IERR(SUBR(sparseMat_delete)(A,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(X,&iflag),iflag);
  PHIST_ICHK_IERR(SUBR(mvec_delete)(R,&iflag),iflag);
  delete A_op;

PHIST_MAIN_TASK_END

  PHIST_ICHK_IERR(phist_kernels_finalize(&iflag),iflag);
  return iflag;
}
