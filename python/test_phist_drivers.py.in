'''Python script to execute some integration tests
'''

#--------------------------------------------------------------------------------
# imports
# imports
import sys
import os
import io
import argparse
import shutil
import subprocess
import platform
import time
import re

import py.test as pytest

try:
    import unittest2 as unittest
except ImportError:
    import unittest


def RunTest(test_name,test_cmd):

    logfile_path='${CMAKE_CURRENT_BINARY_DIR}/'+test_name+'.log'

    mpirun='${MPIEXEC}'
    np_flag='${MPIEXEC_NUMPROC_FLAG}'
    np='${PHIST_TEST_DRIVERS_NUM_PROCS}'
    nt='${PHIST_TEST_DRIVERS_NUM_THREADS}'
    env_args='env PHIST_NUM_THREADS='+nt
    cmd_pre = mpirun+' '+np_flag+' '+np+' '+env_args+' '
    cmd=cmd_pre+' '+test_cmd

    with open(logfile_path, 'w') as logfile:
        prog = subprocess.Popen(cmd,
                            stdout=logfile,
                            stderr=logfile,
                            shell=True)
    
    # wait for the process to finish
    prog.communicate()

    with open(logfile_path, 'r') as logfile:
        logtext = logfile.read()
    
    # check returncode
    if prog.returncode!=0:
        print('program returned non-zero value ',prog.returncode);
        print(logtext)
        sys.stdout.flush()
        return prog.returncode

    if re.search('^ *(ERROR|WARNING|FAIL)', logtext, flags=re.MULTILINE):
        print('Output contains FAILs, ERRORs and/or WARNINGs:\n')
        print(logtext)
        sys.stdout.flush()
        return 1

    sys.stdout.flush()
    return 0


#--------------------------------------------------------------------------------
# tests

class PhistDriversTest(unittest.TestCase):

    def test_jdqr(self):

        test_name='Djdqr'    
        test_cmd = './phist_Djdqr DjadaTestMat512.mm 6 LM 1e-12 45 10 30 1 0.0 GMRES'

        result=RunTest(test_name,test_cmd)
        assert result==0


    def test_subspacejada_spinSZ14(self):

        test_name='Dsubspacejada'    
        test_cmd = './phist_Dsubspacejada  spinSZ14 I 1 10 SR 1e-8 28 4 16 32 4 8 0.0 0 1 1'

        result=RunTest(test_name,test_cmd)
        assert result==0

    def test_restarted_blockedGMRES1(self):

        test_name='Dblockedgmres1'    
        test_cmd = './phist_Dblockedgmres DjadaTestMat512.mm 150 1e-6 1 30'

        result=RunTest(test_name,test_cmd)
        assert result==0

    @pytest.mark.skipif('${PHIST_HAVE_IFPACK}'=='' and '${PHIST_HAVE_IFPACK2}'=='',
                        reason="no TPL available that provides an ILU")
    def test_restarted_blockedGMRES1_ILU(self):

        test_name='Dblockedgmres1_ILU'
        if '${PHIST_HAVE_IFPACK}'!='' or '${PHIST_HAVE_IFPACK2}'!='':
            shutil.copyfile('${CMAKE_SOURCE_DIR}/exampleRuns/precon/ifpack_options.xml', '${CMAKE_CURRENT_BINARY_DIR}/ifpack_options.xml')
# note that we're rather generous here because ifpack2 does (>60 sequentially) does worse than ifpack (42 iterations)
# and the test should also work with more threads
            test_cmd = './phist_Dblockedgmres DjadaTestMat512.mm 100 1e-10 1 10 ifpack ifpack_options.xml'
            result=RunTest(test_name,test_cmd)
            assert result==0


    @pytest.mark.skipif('${PHIST_KERNEL_LIB_EPETRA}'=='' and '${PHIST_KERNEL_LIB_BUILTIN}'=='',
                        reason="CARP kernel only available with epetra and builtin kernel libs so far")
    def test_carp_cg_graphene(self):

        test_name='Dcarp_cg_graphene'

        shutil.copyfile('${CMAKE_SOURCE_DIR}/test/matrices/graphene/128x64/A.mm','${CMAKE_CURRENT_BINARY_DIR}/graphene128x64.mm')

# note that we're rather generous here because the way the KACZ/CARP kernel is implemented has some influence on the convergence speed.
# and the test should also work with more MPI processes and different variants.
        test_cmd = './phist_carp_cg graphene128x64.mm none 1 1 1e-12 350 1.0'
        result=RunTest(test_name,test_cmd)
        assert result==0


    @pytest.mark.skipif('${PHIST_KERNEL_LIB_EPETRA}'=='' and '${PHIST_KERNEL_LIB_BUILTIN}'=='',
                        reason="CARP kernel only available with epetra and builtin kernel libs so far")
    def test_carp_cg_spin_cmplx_shift(self):

        test_name='Dcarp_cg_spin_zshift'

# note that we're rather generous here because the way the KACZ/CARP kernel is implemented has some influence on the convergence speed.
# and the test should also work with more MPI processes and different variants.
        with io.FileIO("test_zshift.txt", "w") as file:
            file.write("1\n")
            file.write("3.1415926       0.1234567")
        
        test_cmd = './phist_carp_cg spinSZ14 test_zshift.txt 1 1 1e-6 350 1.2'
        result=RunTest(test_name,test_cmd)
        assert result==0

